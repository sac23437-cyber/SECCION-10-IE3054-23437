
LAB 4 (ESCLAVO - CONTADOR).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000230  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000816  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e9  00000000  00000000  00000af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000362  00000000  00000000  000011df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000400  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ea  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001aa2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 99 00 	call	0x132	; 0x132 <main>
  88:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_ports>:
volatile uint8_t counter = 0;
volatile uint8_t display_value = 0; // Valor que se envía al maestro (0-15)

void init_ports(void) {
    // Configurar botones como entradas con pull-up
    DDRC &= ~((1 << BUTTON_INC) | (1 << BUTTON_DEC));
  90:	87 b1       	in	r24, 0x07	; 7
  92:	83 7f       	andi	r24, 0xF3	; 243
  94:	87 b9       	out	0x07, r24	; 7
    PORTC |= (1 << BUTTON_INC) | (1 << BUTTON_DEC);
  96:	88 b1       	in	r24, 0x08	; 8
  98:	8c 60       	ori	r24, 0x0C	; 12
  9a:	88 b9       	out	0x08, r24	; 8
    
    // Configurar LEDs como salidas
    DDRD |= (1 << LED0) | (1 << LED1) | (1 << LED2) | (1 << LED3);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8c 63       	ori	r24, 0x3C	; 60
  a0:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~((1 << LED0) | (1 << LED1) | (1 << LED2) | (1 << LED3));
  a2:	8b b1       	in	r24, 0x0b	; 11
  a4:	83 7c       	andi	r24, 0xC3	; 195
  a6:	8b b9       	out	0x0b, r24	; 11
  a8:	08 95       	ret

000000aa <update_leds>:
}

void update_leds(void) {
    // Mostrar solo los 4 bits menos significativos
    PORTD = (PORTD & 0xC3) | ((display_value & 0x0F) << 2);
  aa:	2b b1       	in	r18, 0x0b	; 11
  ac:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b0:	9f 70       	andi	r25, 0x0F	; 15
  b2:	89 2f       	mov	r24, r25
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	92 2f       	mov	r25, r18
  c0:	93 7c       	andi	r25, 0xC3	; 195
  c2:	89 2b       	or	r24, r25
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	08 95       	ret

000000c8 <read_buttons>:
}

uint8_t read_buttons(void) {
    return (~PINC) & ((1 << BUTTON_INC) | (1 << BUTTON_DEC));
  c8:	86 b1       	in	r24, 0x06	; 6
  ca:	80 95       	com	r24
}
  cc:	8c 70       	andi	r24, 0x0C	; 12
  ce:	08 95       	ret

000000d0 <__vector_24>:

ISR(TWI_vect) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
    switch(TWSR & 0xF8) {
  dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  e0:	88 7f       	andi	r24, 0xF8	; 248
  e2:	80 38       	cpi	r24, 0x80	; 128
  e4:	41 f0       	breq	.+16     	; 0xf6 <__vector_24+0x26>
  e6:	88 3a       	cpi	r24, 0xA8	; 168
  e8:	99 f0       	breq	.+38     	; 0x110 <__vector_24+0x40>
  ea:	80 36       	cpi	r24, 0x60	; 96
  ec:	c9 f4       	brne	.+50     	; 0x120 <__vector_24+0x50>
        case 0x60:  // SLA+W recibido
            TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
  ee:	85 ec       	ldi	r24, 0xC5	; 197
  f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
  f4:	18 c0       	rjmp	.+48     	; 0x126 <__vector_24+0x56>
            
        case 0x80:  // Dato recibido
            counter = TWDR;
  f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter>
            display_value = counter & 0x0F; // Mantener entre 0-15
  fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 102:	8f 70       	andi	r24, 0x0F	; 15
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
 108:	85 ec       	ldi	r24, 0xC5	; 197
 10a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
 10e:	0b c0       	rjmp	.+22     	; 0x126 <__vector_24+0x56>
            
        case 0xA8:  // SLA+R recibido
            TWDR = display_value; // Enviar siempre valor entre 0-15
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
            TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
 118:	85 ec       	ldi	r24, 0xC5	; 197
 11a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
 11e:	03 c0       	rjmp	.+6      	; 0x126 <__vector_24+0x56>
            
        default:
            TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
 120:	85 ec       	ldi	r24, 0xC5	; 197
 122:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
    }
}
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <main>:

int main(void) {
    init_ports();
 132:	0e 94 48 00 	call	0x90	; 0x90 <init_ports>
    
    // Inicializar I2C como esclavo
    TWAR = (SLAVE_ADDRESS << 1);
 136:	80 e4       	ldi	r24, 0x40	; 64
 138:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
 13c:	85 e4       	ldi	r24, 0x45	; 69
 13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    sei();  // Habilitar interrupciones globales
 142:	78 94       	sei
    
    while(1) {
        uint8_t buttons = read_buttons();
 144:	0e 94 64 00 	call	0xc8	; 0xc8 <read_buttons>
 148:	c8 2f       	mov	r28, r24
        
        if(buttons & (1 << BUTTON_INC)) {
 14a:	83 ff       	sbrs	r24, 3
 14c:	19 c0       	rjmp	.+50     	; 0x180 <main+0x4e>
            counter++;
 14e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter>
            display_value = counter & 0x0F; // Forzar a 4 bits
 158:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            while(read_buttons() & (1 << BUTTON_INC));
 162:	0e 94 64 00 	call	0xc8	; 0xc8 <read_buttons>
 166:	83 fd       	sbrc	r24, 3
 168:	fc cf       	rjmp	.-8      	; 0x162 <main+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	80 e7       	ldi	r24, 0x70	; 112
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x3e>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x48>
 17a:	00 00       	nop
            _delay_ms(50);
            update_leds();
 17c:	0e 94 55 00 	call	0xaa	; 0xaa <update_leds>
        }
        
        if(buttons & (1 << BUTTON_DEC)) {
 180:	c2 ff       	sbrs	r28, 2
 182:	e0 cf       	rjmp	.-64     	; 0x144 <main+0x12>
            counter--;
 184:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter>
            display_value = counter & 0x0F; // Forzar a 4 bits
 18e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 192:	8f 70       	andi	r24, 0x0F	; 15
 194:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            while(read_buttons() & (1 << BUTTON_DEC));
 198:	0e 94 64 00 	call	0xc8	; 0xc8 <read_buttons>
 19c:	82 fd       	sbrc	r24, 2
 19e:	fc cf       	rjmp	.-8      	; 0x198 <main+0x66>
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	80 e7       	ldi	r24, 0x70	; 112
 1a4:	92 e0       	ldi	r25, 0x02	; 2
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x74>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x7e>
 1b0:	00 00       	nop
            _delay_ms(50);
            update_leds();
 1b2:	0e 94 55 00 	call	0xaa	; 0xaa <update_leds>
 1b6:	c6 cf       	rjmp	.-116    	; 0x144 <main+0x12>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
