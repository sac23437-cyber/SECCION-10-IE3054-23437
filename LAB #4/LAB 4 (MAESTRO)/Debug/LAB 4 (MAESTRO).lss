
LAB 4 (MAESTRO).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000b44  00000bb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b44  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000bee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c4c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011bb  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d7  00000000  00000000  00001f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000846  00000000  00000000  000028f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  0000313c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000550  00000000  00000000  00003304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d1  00000000  00000000  00003854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00004025  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 39 02 	call	0x472	; 0x472 <main>
  8e:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <I2C_Master_Init>:

#include "I2C.h"
//***************************************************************
// Funcion para inicializar I2C Maestro
//***************************************************************
void I2C_Master_Init(unsigned long SCL_Clock, uint8_t Prescaler) {
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	8b 01       	movw	r16, r22
  9e:	9c 01       	movw	r18, r24
  a0:	c4 2f       	mov	r28, r20

    DDRC &= ~((1 << DDC4) | (1 << DDC5));  // Pines de I2C como entradas
  a2:	87 b1       	in	r24, 0x07	; 7
  a4:	8f 7c       	andi	r24, 0xCF	; 207
  a6:	87 b9       	out	0x07, r24	; 7

    switch (Prescaler) {
  a8:	44 30       	cpi	r20, 0x04	; 4
  aa:	79 f0       	breq	.+30     	; 0xca <I2C_Master_Init+0x34>
  ac:	18 f4       	brcc	.+6      	; 0xb4 <I2C_Master_Init+0x1e>
  ae:	41 30       	cpi	r20, 0x01	; 1
  b0:	31 f0       	breq	.+12     	; 0xbe <I2C_Master_Init+0x28>
  b2:	23 c0       	rjmp	.+70     	; 0xfa <I2C_Master_Init+0x64>
  b4:	40 31       	cpi	r20, 0x10	; 16
  b6:	91 f0       	breq	.+36     	; 0xdc <I2C_Master_Init+0x46>
  b8:	40 34       	cpi	r20, 0x40	; 64
  ba:	c9 f0       	breq	.+50     	; 0xee <I2C_Master_Init+0x58>
  bc:	1e c0       	rjmp	.+60     	; 0xfa <I2C_Master_Init+0x64>
        case 1:
            TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
  be:	e9 eb       	ldi	r30, 0xB9	; 185
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8c 7f       	andi	r24, 0xFC	; 252
  c6:	80 83       	st	Z, r24
            break;
  c8:	1e c0       	rjmp	.+60     	; 0x106 <I2C_Master_Init+0x70>
        case 4:
            TWSR &= ~(1 << TWPS1);
  ca:	e9 eb       	ldi	r30, 0xB9	; 185
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	8d 7f       	andi	r24, 0xFD	; 253
  d2:	80 83       	st	Z, r24
            TWSR |= (1 << TWPS0);
  d4:	80 81       	ld	r24, Z
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	80 83       	st	Z, r24
            break;
  da:	15 c0       	rjmp	.+42     	; 0x106 <I2C_Master_Init+0x70>
        case 16:
            TWSR &= ~(1 << TWPS0);
  dc:	e9 eb       	ldi	r30, 0xB9	; 185
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	80 83       	st	Z, r24
            TWSR |= (1 << TWPS1);
  e6:	80 81       	ld	r24, Z
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 83       	st	Z, r24
            break;
  ec:	0c c0       	rjmp	.+24     	; 0x106 <I2C_Master_Init+0x70>
        case 64:
            TWSR |= (1 << TWPS1) | (1 << TWPS0);
  ee:	e9 eb       	ldi	r30, 0xB9	; 185
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	83 60       	ori	r24, 0x03	; 3
  f6:	80 83       	st	Z, r24
            break;
  f8:	06 c0       	rjmp	.+12     	; 0x106 <I2C_Master_Init+0x70>
		default:
			TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
  fa:	e9 eb       	ldi	r30, 0xB9	; 185
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8c 7f       	andi	r24, 0xFC	; 252
 102:	80 83       	st	Z, r24
			Prescaler=1;
 104:	c1 e0       	ldi	r28, 0x01	; 1
			break;

    }
	TWBR = (((16000000)/SCL_Clock)-16)/(2*Prescaler); //Debe ser mayor a 10 para operar de forma estable
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	74 e2       	ldi	r23, 0x24	; 36
 10a:	84 ef       	ldi	r24, 0xF4	; 244
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	a9 01       	movw	r20, r18
 110:	98 01       	movw	r18, r16
 112:	0e 94 86 02 	call	0x50c	; 0x50c <__udivmodsi4>
 116:	ca 01       	movw	r24, r20
 118:	b9 01       	movw	r22, r18
 11a:	60 51       	subi	r22, 0x10	; 16
 11c:	71 09       	sbc	r23, r1
 11e:	81 09       	sbc	r24, r1
 120:	91 09       	sbc	r25, r1
 122:	4c 2f       	mov	r20, r28
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	9a 01       	movw	r18, r20
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	03 2e       	mov	r0, r19
 12e:	00 0c       	add	r0, r0
 130:	44 0b       	sbc	r20, r20
 132:	55 0b       	sbc	r21, r21
 134:	0e 94 86 02 	call	0x50c	; 0x50c <__udivmodsi4>
 138:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1<<TWEN);
 13c:	ec eb       	ldi	r30, 0xBC	; 188
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
}
 146:	cf 91       	pop	r28
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	08 95       	ret

0000014e <I2C_Master_Start>:
// Funcion de inicio de la comunicacion I2C
//************************************************************************
void I2C_Master_Start(void){
    //uint8_t estado;
    
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // Iniciar condición de start
 14e:	84 ea       	ldi	r24, 0xA4	; 164
 150:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while(!(TWCR & (1<<TWINT))); // Espera a que termine la flag TWINT
 154:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 158:	88 23       	and	r24, r24
 15a:	e4 f7       	brge	.-8      	; 0x154 <I2C_Master_Start+0x6>

}
 15c:	08 95       	ret

0000015e <I2C_Master_Stop>:

//************************************************************************
// Funcion de parada de la comunicacion I2C
//************************************************************************
void I2C_Master_Stop(void){
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO); // Inicia el envío secuencia parada STOP
 15e:	84 e9       	ldi	r24, 0x94	; 148
 160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 164:	08 95       	ret

00000166 <I2C_Master_Write>:
// el dato
//************************************************************************
uint8_t I2C_Master_Write(uint8_t dato){
    uint8_t estado;

    TWDR = dato;  // Cargar el dato
 166:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1<<TWEN) | (1<<TWINT); // Inicia el envío
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while(!(TWCR & (1<<TWINT))); // Espera al flag TWINT
 170:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 174:	88 23       	and	r24, r24
 176:	e4 f7       	brge	.-8      	; 0x170 <I2C_Master_Write+0xa>

    estado = TWSR & 0xF8; // Verificar estado
 178:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17c:	88 7f       	andi	r24, 0xF8	; 248

    // Verificar si se transmitió una SLA + W con ACK, SLA + R con ACK, o un Dato con ACK
    if(estado == 0x18 || estado == 0x28 || estado == 0x40){
 17e:	88 31       	cpi	r24, 0x18	; 24
 180:	31 f0       	breq	.+12     	; 0x18e <I2C_Master_Write+0x28>
 182:	88 32       	cpi	r24, 0x28	; 40
 184:	31 f0       	breq	.+12     	; 0x192 <I2C_Master_Write+0x2c>
 186:	80 34       	cpi	r24, 0x40	; 64
 188:	29 f4       	brne	.+10     	; 0x194 <I2C_Master_Write+0x2e>
        return 1;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	08 95       	ret
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret
 192:	81 e0       	ldi	r24, 0x01	; 1
    }else{
        return estado;
    }
}
 194:	08 95       	ret

00000196 <I2C_Master_Read>:

//************************************************************************
// Función de recepción de datos enviados por el esclavo al maestro
// Esta función es para leer los datos que están en el esclavo
//************************************************************************
uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack){
 196:	dc 01       	movw	r26, r24
    uint8_t estado;
    
    if(ack){
 198:	66 23       	and	r22, r22
 19a:	31 f0       	breq	.+12     	; 0x1a8 <I2C_Master_Read+0x12>
        TWCR |= (1<<TWEA);  // Lectura con ACK
 19c:	ec eb       	ldi	r30, 0xBC	; 188
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	90 81       	ld	r25, Z
 1a2:	90 64       	ori	r25, 0x40	; 64
 1a4:	90 83       	st	Z, r25
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <I2C_Master_Read+0x1c>
    }else{
        TWCR &= ~(1<<TWEA); // Lectura sin ACK
 1a8:	ec eb       	ldi	r30, 0xBC	; 188
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	90 81       	ld	r25, Z
 1ae:	9f 7b       	andi	r25, 0xBF	; 191
 1b0:	90 83       	st	Z, r25
    }

    TWCR |= (1<<TWINT); // Iniciamos la lectura
 1b2:	ec eb       	ldi	r30, 0xBC	; 188
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	90 81       	ld	r25, Z
 1b8:	90 68       	ori	r25, 0x80	; 128
 1ba:	90 83       	st	Z, r25
    while(!(TWCR & (1<<TWINT))); // Espera al flag TWINT
 1bc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c0:	99 23       	and	r25, r25
 1c2:	e4 f7       	brge	.-8      	; 0x1bc <I2C_Master_Read+0x26>

    estado = TWSR & 0xF8; // Verificar estado
 1c4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1c8:	98 7f       	andi	r25, 0xF8	; 248

    // Verificar dato leído con ACK o sin ACK
    if(estado == 0x58 || estado == 0x50){
 1ca:	98 35       	cpi	r25, 0x58	; 88
 1cc:	11 f0       	breq	.+4      	; 0x1d2 <I2C_Master_Read+0x3c>
 1ce:	90 35       	cpi	r25, 0x50	; 80
 1d0:	29 f4       	brne	.+10     	; 0x1dc <I2C_Master_Read+0x46>
        *buffer = TWDR;
 1d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1d6:	8c 93       	st	X, r24
        return 1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	08 95       	ret
    }else{
        return estado;
 1dc:	89 2f       	mov	r24, r25
    }
}
 1de:	08 95       	ret

000001e0 <LCD_PulseEnable>:


#include "LCD.h"

void LCD_PulseEnable(void) {
	PORTD |= (1 << LCD_EN);
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	85 e0       	ldi	r24, 0x05	; 5
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCD_PulseEnable+0x8>
 1ec:	00 00       	nop
	_delay_us(1);
	PORTD &= ~(1 << LCD_EN);
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8d 7f       	andi	r24, 0xFD	; 253
 1f2:	8b b9       	out	0x0b, r24	; 11
 1f4:	8f e8       	ldi	r24, 0x8F	; 143
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_PulseEnable+0x18>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_PulseEnable+0x1e>
 1fe:	00 00       	nop
 200:	08 95       	ret

00000202 <LCD_SendByte>:
	_delay_us(100);
}

void LCD_SendByte(uint8_t byte) {
	// Escribir en PORTD (D0-D5)
	PORTD = (PORTD & 0x03) | ((byte & 0x3F) << 2);
 202:	9b b1       	in	r25, 0x0b	; 11
 204:	28 2f       	mov	r18, r24
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	22 0f       	add	r18, r18
 20a:	33 1f       	adc	r19, r19
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	93 70       	andi	r25, 0x03	; 3
 212:	29 2b       	or	r18, r25
 214:	2b b9       	out	0x0b, r18	; 11
	
	// Escribir en PORTB (D6-D7)
	PORTB = (PORTB & 0xFC) | ((byte >> 6) & 0x03);
 216:	95 b1       	in	r25, 0x05	; 5
 218:	9c 7f       	andi	r25, 0xFC	; 252
 21a:	82 95       	swap	r24
 21c:	86 95       	lsr	r24
 21e:	86 95       	lsr	r24
 220:	83 70       	andi	r24, 0x03	; 3
 222:	89 2b       	or	r24, r25
 224:	85 b9       	out	0x05, r24	; 5
	
	LCD_PulseEnable();
 226:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_PulseEnable>
 22a:	08 95       	ret

0000022c <LCD_Cmd>:
	_delay_us(100);
	LCD_Clear();
}

void LCD_Cmd(uint8_t cmd) {
	PORTD &= ~(1 << LCD_RS);
 22c:	9b b1       	in	r25, 0x0b	; 11
 22e:	9e 7f       	andi	r25, 0xFE	; 254
 230:	9b b9       	out	0x0b, r25	; 11
	LCD_SendByte(cmd);
 232:	0e 94 01 01 	call	0x202	; 0x202 <LCD_SendByte>
 236:	08 95       	ret

00000238 <LCD_WriteChar>:
}

void LCD_WriteChar(uint8_t data) {
	PORTD |= (1 << LCD_RS);
 238:	9b b1       	in	r25, 0x0b	; 11
 23a:	91 60       	ori	r25, 0x01	; 1
 23c:	9b b9       	out	0x0b, r25	; 11
	LCD_SendByte(data);
 23e:	0e 94 01 01 	call	0x202	; 0x202 <LCD_SendByte>
 242:	08 95       	ret

00000244 <LCD_WriteString>:
}

void LCD_WriteString(const char *str) {
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	ec 01       	movw	r28, r24
	while(*str) {
 24a:	03 c0       	rjmp	.+6      	; 0x252 <LCD_WriteString+0xe>
		LCD_WriteChar(*str++);
 24c:	21 96       	adiw	r28, 0x01	; 1
 24e:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_WriteChar>
	PORTD |= (1 << LCD_RS);
	LCD_SendByte(data);
}

void LCD_WriteString(const char *str) {
	while(*str) {
 252:	88 81       	ld	r24, Y
 254:	81 11       	cpse	r24, r1
 256:	fa cf       	rjmp	.-12     	; 0x24c <LCD_WriteString+0x8>
		LCD_WriteChar(*str++);
	}
}
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <LCD_SetCursor>:

void LCD_SetCursor(uint8_t x, uint8_t y) {
	uint8_t address = (y == 0) ? 0x80 + x : 0xC0 + x;
 25e:	61 11       	cpse	r22, r1
 260:	02 c0       	rjmp	.+4      	; 0x266 <LCD_SetCursor+0x8>
 262:	80 58       	subi	r24, 0x80	; 128
 264:	01 c0       	rjmp	.+2      	; 0x268 <LCD_SetCursor+0xa>
 266:	80 54       	subi	r24, 0x40	; 64
	LCD_Cmd(address);
 268:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Cmd>
 26c:	08 95       	ret

0000026e <LCD_Clear>:
}

void LCD_Clear(void) {
	LCD_Cmd(0x01);
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	8f e1       	ldi	r24, 0x1F	; 31
 276:	9e e4       	ldi	r25, 0x4E	; 78
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_Clear+0xa>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_Clear+0x10>
 27e:	00 00       	nop
 280:	08 95       	ret

00000282 <LCD_Init>:
	LCD_PulseEnable();
}

void LCD_Init(void) {
	// 1. Configurar pines como salidas
	DDRD |= (1 << LCD_RS) | (1 << LCD_EN) |
 282:	8a b1       	in	r24, 0x0a	; 10
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	8a b9       	out	0x0a, r24	; 10
	(1 << LCD_D0) | (1 << LCD_D1) |
	(1 << LCD_D2) | (1 << LCD_D3) |
	(1 << LCD_D4) | (1 << LCD_D5);
	
	DDRB |= (1 << LCD_D6) | (1 << LCD_D7);
 288:	84 b1       	in	r24, 0x04	; 4
 28a:	83 60       	ori	r24, 0x03	; 3
 28c:	84 b9       	out	0x04, r24	; 4
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	80 e7       	ldi	r24, 0x70	; 112
 292:	92 e0       	ldi	r25, 0x02	; 2
 294:	21 50       	subi	r18, 0x01	; 1
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	90 40       	sbci	r25, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <LCD_Init+0x12>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <LCD_Init+0x1c>
 29e:	00 00       	nop

	// 2. Espera inicial extendida
	_delay_ms(50);

	// 3. Secuencia de inicialización en modo 8 bits
	PORTD &= ~(1 << LCD_RS); // Modo comando
 2a0:	8b b1       	in	r24, 0x0b	; 11
 2a2:	8e 7f       	andi	r24, 0xFE	; 254
 2a4:	8b b9       	out	0x0b, r24	; 11
	
	// Secuencia de reset (3 veces 0x30)
	LCD_SendByte(0x30);
 2a6:	80 e3       	ldi	r24, 0x30	; 48
 2a8:	0e 94 01 01 	call	0x202	; 0x202 <LCD_SendByte>
 2ac:	8f e1       	ldi	r24, 0x1F	; 31
 2ae:	9e e4       	ldi	r25, 0x4E	; 78
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_Init+0x2e>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_Init+0x34>
 2b6:	00 00       	nop
	_delay_ms(5);
	LCD_SendByte(0x30);
 2b8:	80 e3       	ldi	r24, 0x30	; 48
 2ba:	0e 94 01 01 	call	0x202	; 0x202 <LCD_SendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	8f e8       	ldi	r24, 0x8F	; 143
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_Init+0x40>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_Init+0x46>
 2c8:	00 00       	nop
	_delay_us(100);
	LCD_SendByte(0x30);
 2ca:	80 e3       	ldi	r24, 0x30	; 48
 2cc:	0e 94 01 01 	call	0x202	; 0x202 <LCD_SendByte>
 2d0:	8f e8       	ldi	r24, 0x8F	; 143
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_Init+0x52>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_Init+0x58>
 2da:	00 00       	nop
	_delay_us(100);
	
	// Configuración final
	LCD_SendByte(0x38); // 8-bit, 2 line, 5x8 dots
 2dc:	88 e3       	ldi	r24, 0x38	; 56
 2de:	0e 94 01 01 	call	0x202	; 0x202 <LCD_SendByte>
 2e2:	8f e8       	ldi	r24, 0x8F	; 143
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_Init+0x64>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCD_Init+0x6a>
 2ec:	00 00       	nop
	_delay_us(100);
	LCD_SendByte(0x0C); // Display ON, cursor OFF
 2ee:	8c e0       	ldi	r24, 0x0C	; 12
 2f0:	0e 94 01 01 	call	0x202	; 0x202 <LCD_SendByte>
 2f4:	8f e8       	ldi	r24, 0x8F	; 143
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCD_Init+0x76>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCD_Init+0x7c>
 2fe:	00 00       	nop
	_delay_us(100);
	LCD_SendByte(0x06); // Increment, no shift
 300:	86 e0       	ldi	r24, 0x06	; 6
 302:	0e 94 01 01 	call	0x202	; 0x202 <LCD_SendByte>
 306:	8f e8       	ldi	r24, 0x8F	; 143
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_Init+0x88>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_Init+0x8e>
 310:	00 00       	nop
	_delay_us(100);
	LCD_Clear();
 312:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Clear>
 316:	08 95       	ret

00000318 <displayValues>:
#include "I2C/I2C.h"

#define SLAVE_COUNTER_ADDR 0x20
#define SLAVE_POT_ADDR     0x21

void displayValues(uint8_t counter_val, uint16_t pot_val) {
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	60 97       	sbiw	r28, 0x10	; 16
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	f8 2e       	mov	r15, r24
 336:	8b 01       	movw	r16, r22
    char buffer[16];
    
    // Primera línea: Contador (0-15)
    LCD_SetCursor(0, 0);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_SetCursor>
    snprintf(buffer, sizeof(buffer), "Contador: %2u ", counter_val);
 340:	1f 92       	push	r1
 342:	ff 92       	push	r15
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	9f 93       	push	r25
 34a:	8f 93       	push	r24
 34c:	1f 92       	push	r1
 34e:	80 e1       	ldi	r24, 0x10	; 16
 350:	8f 93       	push	r24
 352:	ce 01       	movw	r24, r28
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	7c 01       	movw	r14, r24
 358:	9f 93       	push	r25
 35a:	8f 93       	push	r24
 35c:	0e 94 a8 02 	call	0x550	; 0x550 <snprintf>
    LCD_WriteString(buffer);
 360:	c7 01       	movw	r24, r14
 362:	0e 94 22 01 	call	0x244	; 0x244 <LCD_WriteString>
    
    // Segunda línea: Potenciómetro (0-1023)
    LCD_SetCursor(0, 1);
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_SetCursor>
    
    // Ajustar valor si está fuera de rango (0-1023)
    if(pot_val > 1023) pot_val = 1023;
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
 378:	01 15       	cp	r16, r1
 37a:	94 e0       	ldi	r25, 0x04	; 4
 37c:	19 07       	cpc	r17, r25
 37e:	10 f0       	brcs	.+4      	; 0x384 <displayValues+0x6c>
 380:	0f ef       	ldi	r16, 0xFF	; 255
 382:	13 e0       	ldi	r17, 0x03	; 3
    
    // Mostrar valor y porcentaje
    uint8_t percentage = (pot_val * 100) / 1023;
 384:	24 e6       	ldi	r18, 0x64	; 100
 386:	20 9f       	mul	r18, r16
 388:	c0 01       	movw	r24, r0
 38a:	21 9f       	mul	r18, r17
 38c:	90 0d       	add	r25, r0
 38e:	11 24       	eor	r1, r1
 390:	6f ef       	ldi	r22, 0xFF	; 255
 392:	73 e0       	ldi	r23, 0x03	; 3
 394:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__udivmodhi4>
    snprintf(buffer, sizeof(buffer), "Pot: %4u ", pot_val, percentage);
 398:	77 27       	eor	r23, r23
 39a:	7f 93       	push	r23
 39c:	6f 93       	push	r22
 39e:	1f 93       	push	r17
 3a0:	0f 93       	push	r16
 3a2:	8f e0       	ldi	r24, 0x0F	; 15
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	9f 93       	push	r25
 3a8:	8f 93       	push	r24
 3aa:	1f 92       	push	r1
 3ac:	80 e1       	ldi	r24, 0x10	; 16
 3ae:	8f 93       	push	r24
 3b0:	8e 01       	movw	r16, r28
 3b2:	0f 5f       	subi	r16, 0xFF	; 255
 3b4:	1f 4f       	sbci	r17, 0xFF	; 255
 3b6:	1f 93       	push	r17
 3b8:	0f 93       	push	r16
 3ba:	0e 94 a8 02 	call	0x550	; 0x550 <snprintf>
    LCD_WriteString(buffer);
 3be:	c8 01       	movw	r24, r16
 3c0:	0e 94 22 01 	call	0x244	; 0x244 <LCD_WriteString>
}
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61
 3ce:	60 96       	adiw	r28, 0x10	; 16
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	08 95       	ret

000003e8 <readCounter>:

uint8_t readCounter() {
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	1f 92       	push	r1
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
    uint8_t value = 0;
 3f2:	19 82       	std	Y+1, r1	; 0x01
    
    I2C_Master_Start();
 3f4:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_Master_Start>
    if(I2C_Master_Write((SLAVE_COUNTER_ADDR << 1) | 0x01) == 1) {
 3f8:	81 e4       	ldi	r24, 0x41	; 65
 3fa:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Master_Write>
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	29 f4       	brne	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
        I2C_Master_Read(&value, 0); // Leer con NACK
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	ce 01       	movw	r24, r28
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Master_Read>
    }
    I2C_Master_Stop();
 40c:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Stop>
    
    return value & 0x0F; // Asegurar rango 0-15
 410:	89 81       	ldd	r24, Y+1	; 0x01
}
 412:	8f 70       	andi	r24, 0x0F	; 15
 414:	0f 90       	pop	r0
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <readPotentiometer>:

uint16_t readPotentiometer() {
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	00 d0       	rcall	.+0      	; 0x426 <readPotentiometer+0xa>
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
    uint8_t high_byte, low_byte;
    uint16_t value = 0;
    
    I2C_Master_Start();
 42a:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_Master_Start>
    if(I2C_Master_Write((SLAVE_POT_ADDR << 1) | 0x01) == 1) {
 42e:	83 e4       	ldi	r24, 0x43	; 67
 430:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Master_Write>
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	89 f4       	brne	.+34     	; 0x45a <readPotentiometer+0x3e>
        I2C_Master_Read(&high_byte, 1);   // Leer high byte con ACK
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	ce 01       	movw	r24, r28
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Master_Read>
        I2C_Master_Read(&low_byte, 0);    // Leer low byte con NACK
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	ce 01       	movw	r24, r28
 446:	02 96       	adiw	r24, 0x02	; 2
 448:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Master_Read>
        value = (high_byte << 8) | low_byte;
 44c:	09 81       	ldd	r16, Y+1	; 0x01
 44e:	10 e0       	ldi	r17, 0x00	; 0
 450:	10 2f       	mov	r17, r16
 452:	00 27       	eor	r16, r16
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	08 2b       	or	r16, r24
 458:	02 c0       	rjmp	.+4      	; 0x45e <readPotentiometer+0x42>
    return value & 0x0F; // Asegurar rango 0-15
}

uint16_t readPotentiometer() {
    uint8_t high_byte, low_byte;
    uint16_t value = 0;
 45a:	00 e0       	ldi	r16, 0x00	; 0
 45c:	10 e0       	ldi	r17, 0x00	; 0
    if(I2C_Master_Write((SLAVE_POT_ADDR << 1) | 0x01) == 1) {
        I2C_Master_Read(&high_byte, 1);   // Leer high byte con ACK
        I2C_Master_Read(&low_byte, 0);    // Leer low byte con NACK
        value = (high_byte << 8) | low_byte;
    }
    I2C_Master_Stop();
 45e:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Stop>
    
    return value;
}
 462:	c8 01       	movw	r24, r16
 464:	0f 90       	pop	r0
 466:	0f 90       	pop	r0
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	08 95       	ret

00000472 <main>:

int main(void) {
    LCD_Init();
 472:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Init>
    LCD_Clear();
 476:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Clear>
    I2C_Master_Init(100000, 1);
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	60 ea       	ldi	r22, 0xA0	; 160
 47e:	76 e8       	ldi	r23, 0x86	; 134
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 4b 00 	call	0x96	; 0x96 <I2C_Master_Init>
    
    // Mensaje inicial
    LCD_SetCursor(0, 0);
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_SetCursor>
    LCD_WriteString("Sistema I2C");
 490:	89 e1       	ldi	r24, 0x19	; 25
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 22 01 	call	0x244	; 0x244 <LCD_WriteString>
    LCD_SetCursor(0, 1);
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_SetCursor>
    LCD_WriteString("Inicializando...");
 4a0:	85 e2       	ldi	r24, 0x25	; 37
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	0e 94 22 01 	call	0x244	; 0x244 <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a8:	2f ef       	ldi	r18, 0xFF	; 255
 4aa:	83 ed       	ldi	r24, 0xD3	; 211
 4ac:	90 e3       	ldi	r25, 0x30	; 48
 4ae:	21 50       	subi	r18, 0x01	; 1
 4b0:	80 40       	sbci	r24, 0x00	; 0
 4b2:	90 40       	sbci	r25, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <main+0x3c>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <main+0x46>
 4b8:	00 00       	nop
    _delay_ms(1000);
    LCD_Clear();
 4ba:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Clear>
    
    while(1) {
        uint8_t counter_val = readCounter();
 4be:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <readCounter>
 4c2:	c8 2f       	mov	r28, r24
        uint16_t pot_val = readPotentiometer();
 4c4:	0e 94 0e 02 	call	0x41c	; 0x41c <readPotentiometer>
        
        displayValues(counter_val, pot_val);
 4c8:	bc 01       	movw	r22, r24
 4ca:	8c 2f       	mov	r24, r28
 4cc:	0e 94 8c 01 	call	0x318	; 0x318 <displayValues>
 4d0:	2f ef       	ldi	r18, 0xFF	; 255
 4d2:	83 ec       	ldi	r24, 0xC3	; 195
 4d4:	99 e0       	ldi	r25, 0x09	; 9
 4d6:	21 50       	subi	r18, 0x01	; 1
 4d8:	80 40       	sbci	r24, 0x00	; 0
 4da:	90 40       	sbci	r25, 0x00	; 0
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <main+0x64>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <main+0x6e>
 4e0:	00 00       	nop
 4e2:	ed cf       	rjmp	.-38     	; 0x4be <main+0x4c>

000004e4 <__udivmodhi4>:
 4e4:	aa 1b       	sub	r26, r26
 4e6:	bb 1b       	sub	r27, r27
 4e8:	51 e1       	ldi	r21, 0x11	; 17
 4ea:	07 c0       	rjmp	.+14     	; 0x4fa <__udivmodhi4_ep>

000004ec <__udivmodhi4_loop>:
 4ec:	aa 1f       	adc	r26, r26
 4ee:	bb 1f       	adc	r27, r27
 4f0:	a6 17       	cp	r26, r22
 4f2:	b7 07       	cpc	r27, r23
 4f4:	10 f0       	brcs	.+4      	; 0x4fa <__udivmodhi4_ep>
 4f6:	a6 1b       	sub	r26, r22
 4f8:	b7 0b       	sbc	r27, r23

000004fa <__udivmodhi4_ep>:
 4fa:	88 1f       	adc	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	5a 95       	dec	r21
 500:	a9 f7       	brne	.-22     	; 0x4ec <__udivmodhi4_loop>
 502:	80 95       	com	r24
 504:	90 95       	com	r25
 506:	bc 01       	movw	r22, r24
 508:	cd 01       	movw	r24, r26
 50a:	08 95       	ret

0000050c <__udivmodsi4>:
 50c:	a1 e2       	ldi	r26, 0x21	; 33
 50e:	1a 2e       	mov	r1, r26
 510:	aa 1b       	sub	r26, r26
 512:	bb 1b       	sub	r27, r27
 514:	fd 01       	movw	r30, r26
 516:	0d c0       	rjmp	.+26     	; 0x532 <__udivmodsi4_ep>

00000518 <__udivmodsi4_loop>:
 518:	aa 1f       	adc	r26, r26
 51a:	bb 1f       	adc	r27, r27
 51c:	ee 1f       	adc	r30, r30
 51e:	ff 1f       	adc	r31, r31
 520:	a2 17       	cp	r26, r18
 522:	b3 07       	cpc	r27, r19
 524:	e4 07       	cpc	r30, r20
 526:	f5 07       	cpc	r31, r21
 528:	20 f0       	brcs	.+8      	; 0x532 <__udivmodsi4_ep>
 52a:	a2 1b       	sub	r26, r18
 52c:	b3 0b       	sbc	r27, r19
 52e:	e4 0b       	sbc	r30, r20
 530:	f5 0b       	sbc	r31, r21

00000532 <__udivmodsi4_ep>:
 532:	66 1f       	adc	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	88 1f       	adc	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	1a 94       	dec	r1
 53c:	69 f7       	brne	.-38     	; 0x518 <__udivmodsi4_loop>
 53e:	60 95       	com	r22
 540:	70 95       	com	r23
 542:	80 95       	com	r24
 544:	90 95       	com	r25
 546:	9b 01       	movw	r18, r22
 548:	ac 01       	movw	r20, r24
 54a:	bd 01       	movw	r22, r26
 54c:	cf 01       	movw	r24, r30
 54e:	08 95       	ret

00000550 <snprintf>:
 550:	ae e0       	ldi	r26, 0x0E	; 14
 552:	b0 e0       	ldi	r27, 0x00	; 0
 554:	ee ea       	ldi	r30, 0xAE	; 174
 556:	f2 e0       	ldi	r31, 0x02	; 2
 558:	0c 94 77 05 	jmp	0xaee	; 0xaee <__prologue_saves__+0x1c>
 55c:	0d 89       	ldd	r16, Y+21	; 0x15
 55e:	1e 89       	ldd	r17, Y+22	; 0x16
 560:	8f 89       	ldd	r24, Y+23	; 0x17
 562:	98 8d       	ldd	r25, Y+24	; 0x18
 564:	26 e0       	ldi	r18, 0x06	; 6
 566:	2c 83       	std	Y+4, r18	; 0x04
 568:	1a 83       	std	Y+2, r17	; 0x02
 56a:	09 83       	std	Y+1, r16	; 0x01
 56c:	97 ff       	sbrs	r25, 7
 56e:	02 c0       	rjmp	.+4      	; 0x574 <snprintf+0x24>
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	90 e8       	ldi	r25, 0x80	; 128
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	9e 83       	std	Y+6, r25	; 0x06
 578:	8d 83       	std	Y+5, r24	; 0x05
 57a:	ae 01       	movw	r20, r28
 57c:	45 5e       	subi	r20, 0xE5	; 229
 57e:	5f 4f       	sbci	r21, 0xFF	; 255
 580:	69 8d       	ldd	r22, Y+25	; 0x19
 582:	7a 8d       	ldd	r23, Y+26	; 0x1a
 584:	ce 01       	movw	r24, r28
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <vfprintf>
 58c:	4d 81       	ldd	r20, Y+5	; 0x05
 58e:	5e 81       	ldd	r21, Y+6	; 0x06
 590:	57 fd       	sbrc	r21, 7
 592:	0a c0       	rjmp	.+20     	; 0x5a8 <snprintf+0x58>
 594:	2f 81       	ldd	r18, Y+7	; 0x07
 596:	38 85       	ldd	r19, Y+8	; 0x08
 598:	42 17       	cp	r20, r18
 59a:	53 07       	cpc	r21, r19
 59c:	0c f4       	brge	.+2      	; 0x5a0 <snprintf+0x50>
 59e:	9a 01       	movw	r18, r20
 5a0:	f8 01       	movw	r30, r16
 5a2:	e2 0f       	add	r30, r18
 5a4:	f3 1f       	adc	r31, r19
 5a6:	10 82       	st	Z, r1
 5a8:	2e 96       	adiw	r28, 0x0e	; 14
 5aa:	e4 e0       	ldi	r30, 0x04	; 4
 5ac:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__epilogue_restores__+0x1c>

000005b0 <vfprintf>:
 5b0:	ab e0       	ldi	r26, 0x0B	; 11
 5b2:	b0 e0       	ldi	r27, 0x00	; 0
 5b4:	ee ed       	ldi	r30, 0xDE	; 222
 5b6:	f2 e0       	ldi	r31, 0x02	; 2
 5b8:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__prologue_saves__>
 5bc:	6c 01       	movw	r12, r24
 5be:	7b 01       	movw	r14, r22
 5c0:	8a 01       	movw	r16, r20
 5c2:	fc 01       	movw	r30, r24
 5c4:	17 82       	std	Z+7, r1	; 0x07
 5c6:	16 82       	std	Z+6, r1	; 0x06
 5c8:	83 81       	ldd	r24, Z+3	; 0x03
 5ca:	81 ff       	sbrs	r24, 1
 5cc:	cc c1       	rjmp	.+920    	; 0x966 <__stack+0x67>
 5ce:	ce 01       	movw	r24, r28
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	3c 01       	movw	r6, r24
 5d4:	f6 01       	movw	r30, r12
 5d6:	93 81       	ldd	r25, Z+3	; 0x03
 5d8:	f7 01       	movw	r30, r14
 5da:	93 fd       	sbrc	r25, 3
 5dc:	85 91       	lpm	r24, Z+
 5de:	93 ff       	sbrs	r25, 3
 5e0:	81 91       	ld	r24, Z+
 5e2:	7f 01       	movw	r14, r30
 5e4:	88 23       	and	r24, r24
 5e6:	09 f4       	brne	.+2      	; 0x5ea <vfprintf+0x3a>
 5e8:	ba c1       	rjmp	.+884    	; 0x95e <__stack+0x5f>
 5ea:	85 32       	cpi	r24, 0x25	; 37
 5ec:	39 f4       	brne	.+14     	; 0x5fc <vfprintf+0x4c>
 5ee:	93 fd       	sbrc	r25, 3
 5f0:	85 91       	lpm	r24, Z+
 5f2:	93 ff       	sbrs	r25, 3
 5f4:	81 91       	ld	r24, Z+
 5f6:	7f 01       	movw	r14, r30
 5f8:	85 32       	cpi	r24, 0x25	; 37
 5fa:	29 f4       	brne	.+10     	; 0x606 <vfprintf+0x56>
 5fc:	b6 01       	movw	r22, r12
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 604:	e7 cf       	rjmp	.-50     	; 0x5d4 <vfprintf+0x24>
 606:	91 2c       	mov	r9, r1
 608:	21 2c       	mov	r2, r1
 60a:	31 2c       	mov	r3, r1
 60c:	ff e1       	ldi	r31, 0x1F	; 31
 60e:	f3 15       	cp	r31, r3
 610:	d8 f0       	brcs	.+54     	; 0x648 <vfprintf+0x98>
 612:	8b 32       	cpi	r24, 0x2B	; 43
 614:	79 f0       	breq	.+30     	; 0x634 <vfprintf+0x84>
 616:	38 f4       	brcc	.+14     	; 0x626 <vfprintf+0x76>
 618:	80 32       	cpi	r24, 0x20	; 32
 61a:	79 f0       	breq	.+30     	; 0x63a <vfprintf+0x8a>
 61c:	83 32       	cpi	r24, 0x23	; 35
 61e:	a1 f4       	brne	.+40     	; 0x648 <vfprintf+0x98>
 620:	23 2d       	mov	r18, r3
 622:	20 61       	ori	r18, 0x10	; 16
 624:	1d c0       	rjmp	.+58     	; 0x660 <vfprintf+0xb0>
 626:	8d 32       	cpi	r24, 0x2D	; 45
 628:	61 f0       	breq	.+24     	; 0x642 <vfprintf+0x92>
 62a:	80 33       	cpi	r24, 0x30	; 48
 62c:	69 f4       	brne	.+26     	; 0x648 <vfprintf+0x98>
 62e:	23 2d       	mov	r18, r3
 630:	21 60       	ori	r18, 0x01	; 1
 632:	16 c0       	rjmp	.+44     	; 0x660 <vfprintf+0xb0>
 634:	83 2d       	mov	r24, r3
 636:	82 60       	ori	r24, 0x02	; 2
 638:	38 2e       	mov	r3, r24
 63a:	e3 2d       	mov	r30, r3
 63c:	e4 60       	ori	r30, 0x04	; 4
 63e:	3e 2e       	mov	r3, r30
 640:	2a c0       	rjmp	.+84     	; 0x696 <vfprintf+0xe6>
 642:	f3 2d       	mov	r31, r3
 644:	f8 60       	ori	r31, 0x08	; 8
 646:	1d c0       	rjmp	.+58     	; 0x682 <vfprintf+0xd2>
 648:	37 fc       	sbrc	r3, 7
 64a:	2d c0       	rjmp	.+90     	; 0x6a6 <vfprintf+0xf6>
 64c:	20 ed       	ldi	r18, 0xD0	; 208
 64e:	28 0f       	add	r18, r24
 650:	2a 30       	cpi	r18, 0x0A	; 10
 652:	40 f0       	brcs	.+16     	; 0x664 <vfprintf+0xb4>
 654:	8e 32       	cpi	r24, 0x2E	; 46
 656:	b9 f4       	brne	.+46     	; 0x686 <vfprintf+0xd6>
 658:	36 fc       	sbrc	r3, 6
 65a:	81 c1       	rjmp	.+770    	; 0x95e <__stack+0x5f>
 65c:	23 2d       	mov	r18, r3
 65e:	20 64       	ori	r18, 0x40	; 64
 660:	32 2e       	mov	r3, r18
 662:	19 c0       	rjmp	.+50     	; 0x696 <vfprintf+0xe6>
 664:	36 fe       	sbrs	r3, 6
 666:	06 c0       	rjmp	.+12     	; 0x674 <vfprintf+0xc4>
 668:	8a e0       	ldi	r24, 0x0A	; 10
 66a:	98 9e       	mul	r9, r24
 66c:	20 0d       	add	r18, r0
 66e:	11 24       	eor	r1, r1
 670:	92 2e       	mov	r9, r18
 672:	11 c0       	rjmp	.+34     	; 0x696 <vfprintf+0xe6>
 674:	ea e0       	ldi	r30, 0x0A	; 10
 676:	2e 9e       	mul	r2, r30
 678:	20 0d       	add	r18, r0
 67a:	11 24       	eor	r1, r1
 67c:	22 2e       	mov	r2, r18
 67e:	f3 2d       	mov	r31, r3
 680:	f0 62       	ori	r31, 0x20	; 32
 682:	3f 2e       	mov	r3, r31
 684:	08 c0       	rjmp	.+16     	; 0x696 <vfprintf+0xe6>
 686:	8c 36       	cpi	r24, 0x6C	; 108
 688:	21 f4       	brne	.+8      	; 0x692 <vfprintf+0xe2>
 68a:	83 2d       	mov	r24, r3
 68c:	80 68       	ori	r24, 0x80	; 128
 68e:	38 2e       	mov	r3, r24
 690:	02 c0       	rjmp	.+4      	; 0x696 <vfprintf+0xe6>
 692:	88 36       	cpi	r24, 0x68	; 104
 694:	41 f4       	brne	.+16     	; 0x6a6 <vfprintf+0xf6>
 696:	f7 01       	movw	r30, r14
 698:	93 fd       	sbrc	r25, 3
 69a:	85 91       	lpm	r24, Z+
 69c:	93 ff       	sbrs	r25, 3
 69e:	81 91       	ld	r24, Z+
 6a0:	7f 01       	movw	r14, r30
 6a2:	81 11       	cpse	r24, r1
 6a4:	b3 cf       	rjmp	.-154    	; 0x60c <vfprintf+0x5c>
 6a6:	98 2f       	mov	r25, r24
 6a8:	9f 7d       	andi	r25, 0xDF	; 223
 6aa:	95 54       	subi	r25, 0x45	; 69
 6ac:	93 30       	cpi	r25, 0x03	; 3
 6ae:	28 f4       	brcc	.+10     	; 0x6ba <vfprintf+0x10a>
 6b0:	0c 5f       	subi	r16, 0xFC	; 252
 6b2:	1f 4f       	sbci	r17, 0xFF	; 255
 6b4:	9f e3       	ldi	r25, 0x3F	; 63
 6b6:	99 83       	std	Y+1, r25	; 0x01
 6b8:	0d c0       	rjmp	.+26     	; 0x6d4 <vfprintf+0x124>
 6ba:	83 36       	cpi	r24, 0x63	; 99
 6bc:	31 f0       	breq	.+12     	; 0x6ca <vfprintf+0x11a>
 6be:	83 37       	cpi	r24, 0x73	; 115
 6c0:	71 f0       	breq	.+28     	; 0x6de <vfprintf+0x12e>
 6c2:	83 35       	cpi	r24, 0x53	; 83
 6c4:	09 f0       	breq	.+2      	; 0x6c8 <vfprintf+0x118>
 6c6:	59 c0       	rjmp	.+178    	; 0x77a <vfprintf+0x1ca>
 6c8:	21 c0       	rjmp	.+66     	; 0x70c <vfprintf+0x15c>
 6ca:	f8 01       	movw	r30, r16
 6cc:	80 81       	ld	r24, Z
 6ce:	89 83       	std	Y+1, r24	; 0x01
 6d0:	0e 5f       	subi	r16, 0xFE	; 254
 6d2:	1f 4f       	sbci	r17, 0xFF	; 255
 6d4:	88 24       	eor	r8, r8
 6d6:	83 94       	inc	r8
 6d8:	91 2c       	mov	r9, r1
 6da:	53 01       	movw	r10, r6
 6dc:	13 c0       	rjmp	.+38     	; 0x704 <vfprintf+0x154>
 6de:	28 01       	movw	r4, r16
 6e0:	f2 e0       	ldi	r31, 0x02	; 2
 6e2:	4f 0e       	add	r4, r31
 6e4:	51 1c       	adc	r5, r1
 6e6:	f8 01       	movw	r30, r16
 6e8:	a0 80       	ld	r10, Z
 6ea:	b1 80       	ldd	r11, Z+1	; 0x01
 6ec:	36 fe       	sbrs	r3, 6
 6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <vfprintf+0x146>
 6f0:	69 2d       	mov	r22, r9
 6f2:	70 e0       	ldi	r23, 0x00	; 0
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <vfprintf+0x14a>
 6f6:	6f ef       	ldi	r22, 0xFF	; 255
 6f8:	7f ef       	ldi	r23, 0xFF	; 255
 6fa:	c5 01       	movw	r24, r10
 6fc:	0e 94 c4 04 	call	0x988	; 0x988 <strnlen>
 700:	4c 01       	movw	r8, r24
 702:	82 01       	movw	r16, r4
 704:	f3 2d       	mov	r31, r3
 706:	ff 77       	andi	r31, 0x7F	; 127
 708:	3f 2e       	mov	r3, r31
 70a:	16 c0       	rjmp	.+44     	; 0x738 <vfprintf+0x188>
 70c:	28 01       	movw	r4, r16
 70e:	22 e0       	ldi	r18, 0x02	; 2
 710:	42 0e       	add	r4, r18
 712:	51 1c       	adc	r5, r1
 714:	f8 01       	movw	r30, r16
 716:	a0 80       	ld	r10, Z
 718:	b1 80       	ldd	r11, Z+1	; 0x01
 71a:	36 fe       	sbrs	r3, 6
 71c:	03 c0       	rjmp	.+6      	; 0x724 <vfprintf+0x174>
 71e:	69 2d       	mov	r22, r9
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	02 c0       	rjmp	.+4      	; 0x728 <vfprintf+0x178>
 724:	6f ef       	ldi	r22, 0xFF	; 255
 726:	7f ef       	ldi	r23, 0xFF	; 255
 728:	c5 01       	movw	r24, r10
 72a:	0e 94 b9 04 	call	0x972	; 0x972 <strnlen_P>
 72e:	4c 01       	movw	r8, r24
 730:	f3 2d       	mov	r31, r3
 732:	f0 68       	ori	r31, 0x80	; 128
 734:	3f 2e       	mov	r3, r31
 736:	82 01       	movw	r16, r4
 738:	33 fc       	sbrc	r3, 3
 73a:	1b c0       	rjmp	.+54     	; 0x772 <vfprintf+0x1c2>
 73c:	82 2d       	mov	r24, r2
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	88 16       	cp	r8, r24
 742:	99 06       	cpc	r9, r25
 744:	b0 f4       	brcc	.+44     	; 0x772 <vfprintf+0x1c2>
 746:	b6 01       	movw	r22, r12
 748:	80 e2       	ldi	r24, 0x20	; 32
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 750:	2a 94       	dec	r2
 752:	f4 cf       	rjmp	.-24     	; 0x73c <vfprintf+0x18c>
 754:	f5 01       	movw	r30, r10
 756:	37 fc       	sbrc	r3, 7
 758:	85 91       	lpm	r24, Z+
 75a:	37 fe       	sbrs	r3, 7
 75c:	81 91       	ld	r24, Z+
 75e:	5f 01       	movw	r10, r30
 760:	b6 01       	movw	r22, r12
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 768:	21 10       	cpse	r2, r1
 76a:	2a 94       	dec	r2
 76c:	21 e0       	ldi	r18, 0x01	; 1
 76e:	82 1a       	sub	r8, r18
 770:	91 08       	sbc	r9, r1
 772:	81 14       	cp	r8, r1
 774:	91 04       	cpc	r9, r1
 776:	71 f7       	brne	.-36     	; 0x754 <vfprintf+0x1a4>
 778:	e8 c0       	rjmp	.+464    	; 0x94a <__stack+0x4b>
 77a:	84 36       	cpi	r24, 0x64	; 100
 77c:	11 f0       	breq	.+4      	; 0x782 <vfprintf+0x1d2>
 77e:	89 36       	cpi	r24, 0x69	; 105
 780:	41 f5       	brne	.+80     	; 0x7d2 <vfprintf+0x222>
 782:	f8 01       	movw	r30, r16
 784:	37 fe       	sbrs	r3, 7
 786:	07 c0       	rjmp	.+14     	; 0x796 <vfprintf+0x1e6>
 788:	60 81       	ld	r22, Z
 78a:	71 81       	ldd	r23, Z+1	; 0x01
 78c:	82 81       	ldd	r24, Z+2	; 0x02
 78e:	93 81       	ldd	r25, Z+3	; 0x03
 790:	0c 5f       	subi	r16, 0xFC	; 252
 792:	1f 4f       	sbci	r17, 0xFF	; 255
 794:	08 c0       	rjmp	.+16     	; 0x7a6 <vfprintf+0x1f6>
 796:	60 81       	ld	r22, Z
 798:	71 81       	ldd	r23, Z+1	; 0x01
 79a:	07 2e       	mov	r0, r23
 79c:	00 0c       	add	r0, r0
 79e:	88 0b       	sbc	r24, r24
 7a0:	99 0b       	sbc	r25, r25
 7a2:	0e 5f       	subi	r16, 0xFE	; 254
 7a4:	1f 4f       	sbci	r17, 0xFF	; 255
 7a6:	f3 2d       	mov	r31, r3
 7a8:	ff 76       	andi	r31, 0x6F	; 111
 7aa:	3f 2e       	mov	r3, r31
 7ac:	97 ff       	sbrs	r25, 7
 7ae:	09 c0       	rjmp	.+18     	; 0x7c2 <vfprintf+0x212>
 7b0:	90 95       	com	r25
 7b2:	80 95       	com	r24
 7b4:	70 95       	com	r23
 7b6:	61 95       	neg	r22
 7b8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ba:	8f 4f       	sbci	r24, 0xFF	; 255
 7bc:	9f 4f       	sbci	r25, 0xFF	; 255
 7be:	f0 68       	ori	r31, 0x80	; 128
 7c0:	3f 2e       	mov	r3, r31
 7c2:	2a e0       	ldi	r18, 0x0A	; 10
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	a3 01       	movw	r20, r6
 7c8:	0e 94 0b 05 	call	0xa16	; 0xa16 <__ultoa_invert>
 7cc:	88 2e       	mov	r8, r24
 7ce:	86 18       	sub	r8, r6
 7d0:	45 c0       	rjmp	.+138    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 7d2:	85 37       	cpi	r24, 0x75	; 117
 7d4:	31 f4       	brne	.+12     	; 0x7e2 <vfprintf+0x232>
 7d6:	23 2d       	mov	r18, r3
 7d8:	2f 7e       	andi	r18, 0xEF	; 239
 7da:	b2 2e       	mov	r11, r18
 7dc:	2a e0       	ldi	r18, 0x0A	; 10
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	25 c0       	rjmp	.+74     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 7e2:	93 2d       	mov	r25, r3
 7e4:	99 7f       	andi	r25, 0xF9	; 249
 7e6:	b9 2e       	mov	r11, r25
 7e8:	8f 36       	cpi	r24, 0x6F	; 111
 7ea:	c1 f0       	breq	.+48     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7ec:	18 f4       	brcc	.+6      	; 0x7f4 <vfprintf+0x244>
 7ee:	88 35       	cpi	r24, 0x58	; 88
 7f0:	79 f0       	breq	.+30     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7f2:	b5 c0       	rjmp	.+362    	; 0x95e <__stack+0x5f>
 7f4:	80 37       	cpi	r24, 0x70	; 112
 7f6:	19 f0       	breq	.+6      	; 0x7fe <vfprintf+0x24e>
 7f8:	88 37       	cpi	r24, 0x78	; 120
 7fa:	21 f0       	breq	.+8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7fc:	b0 c0       	rjmp	.+352    	; 0x95e <__stack+0x5f>
 7fe:	e9 2f       	mov	r30, r25
 800:	e0 61       	ori	r30, 0x10	; 16
 802:	be 2e       	mov	r11, r30
 804:	b4 fe       	sbrs	r11, 4
 806:	0d c0       	rjmp	.+26     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 808:	fb 2d       	mov	r31, r11
 80a:	f4 60       	ori	r31, 0x04	; 4
 80c:	bf 2e       	mov	r11, r31
 80e:	09 c0       	rjmp	.+18     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 810:	34 fe       	sbrs	r3, 4
 812:	0a c0       	rjmp	.+20     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 814:	29 2f       	mov	r18, r25
 816:	26 60       	ori	r18, 0x06	; 6
 818:	b2 2e       	mov	r11, r18
 81a:	06 c0       	rjmp	.+12     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 81c:	28 e0       	ldi	r18, 0x08	; 8
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	05 c0       	rjmp	.+10     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 822:	20 e1       	ldi	r18, 0x10	; 16
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	02 c0       	rjmp	.+4      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 828:	20 e1       	ldi	r18, 0x10	; 16
 82a:	32 e0       	ldi	r19, 0x02	; 2
 82c:	f8 01       	movw	r30, r16
 82e:	b7 fe       	sbrs	r11, 7
 830:	07 c0       	rjmp	.+14     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 832:	60 81       	ld	r22, Z
 834:	71 81       	ldd	r23, Z+1	; 0x01
 836:	82 81       	ldd	r24, Z+2	; 0x02
 838:	93 81       	ldd	r25, Z+3	; 0x03
 83a:	0c 5f       	subi	r16, 0xFC	; 252
 83c:	1f 4f       	sbci	r17, 0xFF	; 255
 83e:	06 c0       	rjmp	.+12     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 840:	60 81       	ld	r22, Z
 842:	71 81       	ldd	r23, Z+1	; 0x01
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 5f       	subi	r16, 0xFE	; 254
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	a3 01       	movw	r20, r6
 84e:	0e 94 0b 05 	call	0xa16	; 0xa16 <__ultoa_invert>
 852:	88 2e       	mov	r8, r24
 854:	86 18       	sub	r8, r6
 856:	fb 2d       	mov	r31, r11
 858:	ff 77       	andi	r31, 0x7F	; 127
 85a:	3f 2e       	mov	r3, r31
 85c:	36 fe       	sbrs	r3, 6
 85e:	0d c0       	rjmp	.+26     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 860:	23 2d       	mov	r18, r3
 862:	2e 7f       	andi	r18, 0xFE	; 254
 864:	a2 2e       	mov	r10, r18
 866:	89 14       	cp	r8, r9
 868:	58 f4       	brcc	.+22     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 86a:	34 fe       	sbrs	r3, 4
 86c:	0b c0       	rjmp	.+22     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 86e:	32 fc       	sbrc	r3, 2
 870:	09 c0       	rjmp	.+18     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 872:	83 2d       	mov	r24, r3
 874:	8e 7e       	andi	r24, 0xEE	; 238
 876:	a8 2e       	mov	r10, r24
 878:	05 c0       	rjmp	.+10     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 87a:	b8 2c       	mov	r11, r8
 87c:	a3 2c       	mov	r10, r3
 87e:	03 c0       	rjmp	.+6      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 880:	b8 2c       	mov	r11, r8
 882:	01 c0       	rjmp	.+2      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 884:	b9 2c       	mov	r11, r9
 886:	a4 fe       	sbrs	r10, 4
 888:	0f c0       	rjmp	.+30     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 88a:	fe 01       	movw	r30, r28
 88c:	e8 0d       	add	r30, r8
 88e:	f1 1d       	adc	r31, r1
 890:	80 81       	ld	r24, Z
 892:	80 33       	cpi	r24, 0x30	; 48
 894:	21 f4       	brne	.+8      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 896:	9a 2d       	mov	r25, r10
 898:	99 7e       	andi	r25, 0xE9	; 233
 89a:	a9 2e       	mov	r10, r25
 89c:	09 c0       	rjmp	.+18     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 89e:	a2 fe       	sbrs	r10, 2
 8a0:	06 c0       	rjmp	.+12     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 8a2:	b3 94       	inc	r11
 8a4:	b3 94       	inc	r11
 8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8a8:	8a 2d       	mov	r24, r10
 8aa:	86 78       	andi	r24, 0x86	; 134
 8ac:	09 f0       	breq	.+2      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8ae:	b3 94       	inc	r11
 8b0:	a3 fc       	sbrc	r10, 3
 8b2:	11 c0       	rjmp	.+34     	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8b4:	a0 fe       	sbrs	r10, 0
 8b6:	06 c0       	rjmp	.+12     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8b8:	b2 14       	cp	r11, r2
 8ba:	88 f4       	brcc	.+34     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8bc:	28 0c       	add	r2, r8
 8be:	92 2c       	mov	r9, r2
 8c0:	9b 18       	sub	r9, r11
 8c2:	0e c0       	rjmp	.+28     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8c4:	b2 14       	cp	r11, r2
 8c6:	60 f4       	brcc	.+24     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8c8:	b6 01       	movw	r22, r12
 8ca:	80 e2       	ldi	r24, 0x20	; 32
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 8d2:	b3 94       	inc	r11
 8d4:	f7 cf       	rjmp	.-18     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8d6:	b2 14       	cp	r11, r2
 8d8:	18 f4       	brcc	.+6      	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8da:	2b 18       	sub	r2, r11
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8de:	98 2c       	mov	r9, r8
 8e0:	21 2c       	mov	r2, r1
 8e2:	a4 fe       	sbrs	r10, 4
 8e4:	10 c0       	rjmp	.+32     	; 0x906 <__stack+0x7>
 8e6:	b6 01       	movw	r22, r12
 8e8:	80 e3       	ldi	r24, 0x30	; 48
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 8f0:	a2 fe       	sbrs	r10, 2
 8f2:	17 c0       	rjmp	.+46     	; 0x922 <__stack+0x23>
 8f4:	a1 fc       	sbrc	r10, 1
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 8f8:	88 e7       	ldi	r24, 0x78	; 120
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0x3>
 8fe:	88 e5       	ldi	r24, 0x58	; 88
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	b6 01       	movw	r22, r12
 904:	0c c0       	rjmp	.+24     	; 0x91e <__stack+0x1f>
 906:	8a 2d       	mov	r24, r10
 908:	86 78       	andi	r24, 0x86	; 134
 90a:	59 f0       	breq	.+22     	; 0x922 <__stack+0x23>
 90c:	a1 fe       	sbrs	r10, 1
 90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0x15>
 910:	8b e2       	ldi	r24, 0x2B	; 43
 912:	01 c0       	rjmp	.+2      	; 0x916 <__stack+0x17>
 914:	80 e2       	ldi	r24, 0x20	; 32
 916:	a7 fc       	sbrc	r10, 7
 918:	8d e2       	ldi	r24, 0x2D	; 45
 91a:	b6 01       	movw	r22, r12
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 922:	89 14       	cp	r8, r9
 924:	38 f4       	brcc	.+14     	; 0x934 <__stack+0x35>
 926:	b6 01       	movw	r22, r12
 928:	80 e3       	ldi	r24, 0x30	; 48
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 930:	9a 94       	dec	r9
 932:	f7 cf       	rjmp	.-18     	; 0x922 <__stack+0x23>
 934:	8a 94       	dec	r8
 936:	f3 01       	movw	r30, r6
 938:	e8 0d       	add	r30, r8
 93a:	f1 1d       	adc	r31, r1
 93c:	80 81       	ld	r24, Z
 93e:	b6 01       	movw	r22, r12
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 946:	81 10       	cpse	r8, r1
 948:	f5 cf       	rjmp	.-22     	; 0x934 <__stack+0x35>
 94a:	22 20       	and	r2, r2
 94c:	09 f4       	brne	.+2      	; 0x950 <__stack+0x51>
 94e:	42 ce       	rjmp	.-892    	; 0x5d4 <vfprintf+0x24>
 950:	b6 01       	movw	r22, r12
 952:	80 e2       	ldi	r24, 0x20	; 32
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 95a:	2a 94       	dec	r2
 95c:	f6 cf       	rjmp	.-20     	; 0x94a <__stack+0x4b>
 95e:	f6 01       	movw	r30, r12
 960:	86 81       	ldd	r24, Z+6	; 0x06
 962:	97 81       	ldd	r25, Z+7	; 0x07
 964:	02 c0       	rjmp	.+4      	; 0x96a <__stack+0x6b>
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	9f ef       	ldi	r25, 0xFF	; 255
 96a:	2b 96       	adiw	r28, 0x0b	; 11
 96c:	e2 e1       	ldi	r30, 0x12	; 18
 96e:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__epilogue_restores__>

00000972 <strnlen_P>:
 972:	fc 01       	movw	r30, r24
 974:	05 90       	lpm	r0, Z+
 976:	61 50       	subi	r22, 0x01	; 1
 978:	70 40       	sbci	r23, 0x00	; 0
 97a:	01 10       	cpse	r0, r1
 97c:	d8 f7       	brcc	.-10     	; 0x974 <strnlen_P+0x2>
 97e:	80 95       	com	r24
 980:	90 95       	com	r25
 982:	8e 0f       	add	r24, r30
 984:	9f 1f       	adc	r25, r31
 986:	08 95       	ret

00000988 <strnlen>:
 988:	fc 01       	movw	r30, r24
 98a:	61 50       	subi	r22, 0x01	; 1
 98c:	70 40       	sbci	r23, 0x00	; 0
 98e:	01 90       	ld	r0, Z+
 990:	01 10       	cpse	r0, r1
 992:	d8 f7       	brcc	.-10     	; 0x98a <strnlen+0x2>
 994:	80 95       	com	r24
 996:	90 95       	com	r25
 998:	8e 0f       	add	r24, r30
 99a:	9f 1f       	adc	r25, r31
 99c:	08 95       	ret

0000099e <fputc>:
 99e:	0f 93       	push	r16
 9a0:	1f 93       	push	r17
 9a2:	cf 93       	push	r28
 9a4:	df 93       	push	r29
 9a6:	fb 01       	movw	r30, r22
 9a8:	23 81       	ldd	r18, Z+3	; 0x03
 9aa:	21 fd       	sbrc	r18, 1
 9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <fputc+0x16>
 9ae:	8f ef       	ldi	r24, 0xFF	; 255
 9b0:	9f ef       	ldi	r25, 0xFF	; 255
 9b2:	2c c0       	rjmp	.+88     	; 0xa0c <fputc+0x6e>
 9b4:	22 ff       	sbrs	r18, 2
 9b6:	16 c0       	rjmp	.+44     	; 0x9e4 <fputc+0x46>
 9b8:	46 81       	ldd	r20, Z+6	; 0x06
 9ba:	57 81       	ldd	r21, Z+7	; 0x07
 9bc:	24 81       	ldd	r18, Z+4	; 0x04
 9be:	35 81       	ldd	r19, Z+5	; 0x05
 9c0:	42 17       	cp	r20, r18
 9c2:	53 07       	cpc	r21, r19
 9c4:	44 f4       	brge	.+16     	; 0x9d6 <fputc+0x38>
 9c6:	a0 81       	ld	r26, Z
 9c8:	b1 81       	ldd	r27, Z+1	; 0x01
 9ca:	9d 01       	movw	r18, r26
 9cc:	2f 5f       	subi	r18, 0xFF	; 255
 9ce:	3f 4f       	sbci	r19, 0xFF	; 255
 9d0:	31 83       	std	Z+1, r19	; 0x01
 9d2:	20 83       	st	Z, r18
 9d4:	8c 93       	st	X, r24
 9d6:	26 81       	ldd	r18, Z+6	; 0x06
 9d8:	37 81       	ldd	r19, Z+7	; 0x07
 9da:	2f 5f       	subi	r18, 0xFF	; 255
 9dc:	3f 4f       	sbci	r19, 0xFF	; 255
 9de:	37 83       	std	Z+7, r19	; 0x07
 9e0:	26 83       	std	Z+6, r18	; 0x06
 9e2:	14 c0       	rjmp	.+40     	; 0xa0c <fputc+0x6e>
 9e4:	8b 01       	movw	r16, r22
 9e6:	ec 01       	movw	r28, r24
 9e8:	fb 01       	movw	r30, r22
 9ea:	00 84       	ldd	r0, Z+8	; 0x08
 9ec:	f1 85       	ldd	r31, Z+9	; 0x09
 9ee:	e0 2d       	mov	r30, r0
 9f0:	09 95       	icall
 9f2:	89 2b       	or	r24, r25
 9f4:	e1 f6       	brne	.-72     	; 0x9ae <fputc+0x10>
 9f6:	d8 01       	movw	r26, r16
 9f8:	16 96       	adiw	r26, 0x06	; 6
 9fa:	8d 91       	ld	r24, X+
 9fc:	9c 91       	ld	r25, X
 9fe:	17 97       	sbiw	r26, 0x07	; 7
 a00:	01 96       	adiw	r24, 0x01	; 1
 a02:	17 96       	adiw	r26, 0x07	; 7
 a04:	9c 93       	st	X, r25
 a06:	8e 93       	st	-X, r24
 a08:	16 97       	sbiw	r26, 0x06	; 6
 a0a:	ce 01       	movw	r24, r28
 a0c:	df 91       	pop	r29
 a0e:	cf 91       	pop	r28
 a10:	1f 91       	pop	r17
 a12:	0f 91       	pop	r16
 a14:	08 95       	ret

00000a16 <__ultoa_invert>:
 a16:	fa 01       	movw	r30, r20
 a18:	aa 27       	eor	r26, r26
 a1a:	28 30       	cpi	r18, 0x08	; 8
 a1c:	51 f1       	breq	.+84     	; 0xa72 <__ultoa_invert+0x5c>
 a1e:	20 31       	cpi	r18, 0x10	; 16
 a20:	81 f1       	breq	.+96     	; 0xa82 <__ultoa_invert+0x6c>
 a22:	e8 94       	clt
 a24:	6f 93       	push	r22
 a26:	6e 7f       	andi	r22, 0xFE	; 254
 a28:	6e 5f       	subi	r22, 0xFE	; 254
 a2a:	7f 4f       	sbci	r23, 0xFF	; 255
 a2c:	8f 4f       	sbci	r24, 0xFF	; 255
 a2e:	9f 4f       	sbci	r25, 0xFF	; 255
 a30:	af 4f       	sbci	r26, 0xFF	; 255
 a32:	b1 e0       	ldi	r27, 0x01	; 1
 a34:	3e d0       	rcall	.+124    	; 0xab2 <__ultoa_invert+0x9c>
 a36:	b4 e0       	ldi	r27, 0x04	; 4
 a38:	3c d0       	rcall	.+120    	; 0xab2 <__ultoa_invert+0x9c>
 a3a:	67 0f       	add	r22, r23
 a3c:	78 1f       	adc	r23, r24
 a3e:	89 1f       	adc	r24, r25
 a40:	9a 1f       	adc	r25, r26
 a42:	a1 1d       	adc	r26, r1
 a44:	68 0f       	add	r22, r24
 a46:	79 1f       	adc	r23, r25
 a48:	8a 1f       	adc	r24, r26
 a4a:	91 1d       	adc	r25, r1
 a4c:	a1 1d       	adc	r26, r1
 a4e:	6a 0f       	add	r22, r26
 a50:	71 1d       	adc	r23, r1
 a52:	81 1d       	adc	r24, r1
 a54:	91 1d       	adc	r25, r1
 a56:	a1 1d       	adc	r26, r1
 a58:	20 d0       	rcall	.+64     	; 0xa9a <__ultoa_invert+0x84>
 a5a:	09 f4       	brne	.+2      	; 0xa5e <__ultoa_invert+0x48>
 a5c:	68 94       	set
 a5e:	3f 91       	pop	r19
 a60:	2a e0       	ldi	r18, 0x0A	; 10
 a62:	26 9f       	mul	r18, r22
 a64:	11 24       	eor	r1, r1
 a66:	30 19       	sub	r19, r0
 a68:	30 5d       	subi	r19, 0xD0	; 208
 a6a:	31 93       	st	Z+, r19
 a6c:	de f6       	brtc	.-74     	; 0xa24 <__ultoa_invert+0xe>
 a6e:	cf 01       	movw	r24, r30
 a70:	08 95       	ret
 a72:	46 2f       	mov	r20, r22
 a74:	47 70       	andi	r20, 0x07	; 7
 a76:	40 5d       	subi	r20, 0xD0	; 208
 a78:	41 93       	st	Z+, r20
 a7a:	b3 e0       	ldi	r27, 0x03	; 3
 a7c:	0f d0       	rcall	.+30     	; 0xa9c <__ultoa_invert+0x86>
 a7e:	c9 f7       	brne	.-14     	; 0xa72 <__ultoa_invert+0x5c>
 a80:	f6 cf       	rjmp	.-20     	; 0xa6e <__ultoa_invert+0x58>
 a82:	46 2f       	mov	r20, r22
 a84:	4f 70       	andi	r20, 0x0F	; 15
 a86:	40 5d       	subi	r20, 0xD0	; 208
 a88:	4a 33       	cpi	r20, 0x3A	; 58
 a8a:	18 f0       	brcs	.+6      	; 0xa92 <__ultoa_invert+0x7c>
 a8c:	49 5d       	subi	r20, 0xD9	; 217
 a8e:	31 fd       	sbrc	r19, 1
 a90:	40 52       	subi	r20, 0x20	; 32
 a92:	41 93       	st	Z+, r20
 a94:	02 d0       	rcall	.+4      	; 0xa9a <__ultoa_invert+0x84>
 a96:	a9 f7       	brne	.-22     	; 0xa82 <__ultoa_invert+0x6c>
 a98:	ea cf       	rjmp	.-44     	; 0xa6e <__ultoa_invert+0x58>
 a9a:	b4 e0       	ldi	r27, 0x04	; 4
 a9c:	a6 95       	lsr	r26
 a9e:	97 95       	ror	r25
 aa0:	87 95       	ror	r24
 aa2:	77 95       	ror	r23
 aa4:	67 95       	ror	r22
 aa6:	ba 95       	dec	r27
 aa8:	c9 f7       	brne	.-14     	; 0xa9c <__ultoa_invert+0x86>
 aaa:	00 97       	sbiw	r24, 0x00	; 0
 aac:	61 05       	cpc	r22, r1
 aae:	71 05       	cpc	r23, r1
 ab0:	08 95       	ret
 ab2:	9b 01       	movw	r18, r22
 ab4:	ac 01       	movw	r20, r24
 ab6:	0a 2e       	mov	r0, r26
 ab8:	06 94       	lsr	r0
 aba:	57 95       	ror	r21
 abc:	47 95       	ror	r20
 abe:	37 95       	ror	r19
 ac0:	27 95       	ror	r18
 ac2:	ba 95       	dec	r27
 ac4:	c9 f7       	brne	.-14     	; 0xab8 <__ultoa_invert+0xa2>
 ac6:	62 0f       	add	r22, r18
 ac8:	73 1f       	adc	r23, r19
 aca:	84 1f       	adc	r24, r20
 acc:	95 1f       	adc	r25, r21
 ace:	a0 1d       	adc	r26, r0
 ad0:	08 95       	ret

00000ad2 <__prologue_saves__>:
 ad2:	2f 92       	push	r2
 ad4:	3f 92       	push	r3
 ad6:	4f 92       	push	r4
 ad8:	5f 92       	push	r5
 ada:	6f 92       	push	r6
 adc:	7f 92       	push	r7
 ade:	8f 92       	push	r8
 ae0:	9f 92       	push	r9
 ae2:	af 92       	push	r10
 ae4:	bf 92       	push	r11
 ae6:	cf 92       	push	r12
 ae8:	df 92       	push	r13
 aea:	ef 92       	push	r14
 aec:	ff 92       	push	r15
 aee:	0f 93       	push	r16
 af0:	1f 93       	push	r17
 af2:	cf 93       	push	r28
 af4:	df 93       	push	r29
 af6:	cd b7       	in	r28, 0x3d	; 61
 af8:	de b7       	in	r29, 0x3e	; 62
 afa:	ca 1b       	sub	r28, r26
 afc:	db 0b       	sbc	r29, r27
 afe:	0f b6       	in	r0, 0x3f	; 63
 b00:	f8 94       	cli
 b02:	de bf       	out	0x3e, r29	; 62
 b04:	0f be       	out	0x3f, r0	; 63
 b06:	cd bf       	out	0x3d, r28	; 61
 b08:	09 94       	ijmp

00000b0a <__epilogue_restores__>:
 b0a:	2a 88       	ldd	r2, Y+18	; 0x12
 b0c:	39 88       	ldd	r3, Y+17	; 0x11
 b0e:	48 88       	ldd	r4, Y+16	; 0x10
 b10:	5f 84       	ldd	r5, Y+15	; 0x0f
 b12:	6e 84       	ldd	r6, Y+14	; 0x0e
 b14:	7d 84       	ldd	r7, Y+13	; 0x0d
 b16:	8c 84       	ldd	r8, Y+12	; 0x0c
 b18:	9b 84       	ldd	r9, Y+11	; 0x0b
 b1a:	aa 84       	ldd	r10, Y+10	; 0x0a
 b1c:	b9 84       	ldd	r11, Y+9	; 0x09
 b1e:	c8 84       	ldd	r12, Y+8	; 0x08
 b20:	df 80       	ldd	r13, Y+7	; 0x07
 b22:	ee 80       	ldd	r14, Y+6	; 0x06
 b24:	fd 80       	ldd	r15, Y+5	; 0x05
 b26:	0c 81       	ldd	r16, Y+4	; 0x04
 b28:	1b 81       	ldd	r17, Y+3	; 0x03
 b2a:	aa 81       	ldd	r26, Y+2	; 0x02
 b2c:	b9 81       	ldd	r27, Y+1	; 0x01
 b2e:	ce 0f       	add	r28, r30
 b30:	d1 1d       	adc	r29, r1
 b32:	0f b6       	in	r0, 0x3f	; 63
 b34:	f8 94       	cli
 b36:	de bf       	out	0x3e, r29	; 62
 b38:	0f be       	out	0x3f, r0	; 63
 b3a:	cd bf       	out	0x3d, r28	; 61
 b3c:	ed 01       	movw	r28, r26
 b3e:	08 95       	ret

00000b40 <_exit>:
 b40:	f8 94       	cli

00000b42 <__stop_program>:
 b42:	ff cf       	rjmp	.-2      	; 0xb42 <__stop_program>
