
LAB Y POST-LAB 3 (ESCLAVO).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001b4  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008eb  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079b  00000000  00000000  00000c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047b  00000000  00000000  000013b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000160  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_17>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  8e:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADC_Init>:
#include "ADC.h"
#include <avr/io.h>

void ADC_Init() {
	// Configurar ADC
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Enable ADC, prescaler 128
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9c:	08 95       	ret

0000009e <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	// Seleccionar canal y referencia AVcc
	ADMUX = (1 << REFS0) | (channel & 0x07);
  9e:	87 70       	andi	r24, 0x07	; 7
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// Iniciar conversión
	ADCSRA |= (1 << ADSC);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	
	// Esperar fin de conversión
	while(ADCSRA & (1 << ADSC));
  b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b4:	86 fd       	sbrc	r24, 6
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <ADC_Read+0x12>
	
	return ADC;
  b8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  bc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  c0:	08 95       	ret

000000c2 <actualizarLEDs>:
#define LEDS_PORTD_MASK 0b11111100  // Pines D2-D7
#define LEDS_PORTB_MASK 0b00000011  // Pines B0-B1 (D8-D9)


void actualizarLEDs(uint8_t valor) {
    PORTD = (PORTD & ~LEDS_PORTD_MASK) | ((valor << 2) & LEDS_PORTD_MASK);
  c2:	9b b1       	in	r25, 0x0b	; 11
  c4:	28 2f       	mov	r18, r24
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	93 70       	andi	r25, 0x03	; 3
  d2:	29 2b       	or	r18, r25
  d4:	2b b9       	out	0x0b, r18	; 11
    PORTB = (PORTB & ~LEDS_PORTB_MASK) | ((valor >> 6) & LEDS_PORTB_MASK);
  d6:	95 b1       	in	r25, 0x05	; 5
  d8:	9c 7f       	andi	r25, 0xFC	; 252
  da:	82 95       	swap	r24
  dc:	86 95       	lsr	r24
  de:	86 95       	lsr	r24
  e0:	83 70       	andi	r24, 0x03	; 3
  e2:	89 2b       	or	r24, r25
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	08 95       	ret

000000e8 <__vector_17>:
}

ISR(SPI_STC_vect) {
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	6f 93       	push	r22
  fc:	7f 93       	push	r23
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
    static uint8_t esperando_comando = 1;
    uint8_t dato = SPDR;
 10a:	8e b5       	in	r24, 0x2e	; 46
    
    if(esperando_comando) {
 10c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 110:	99 23       	and	r25, r25
 112:	e9 f0       	breq	.+58     	; 0x14e <__vector_17+0x66>
        switch(dato) {
 114:	81 34       	cpi	r24, 0x41	; 65
 116:	19 f0       	breq	.+6      	; 0x11e <__vector_17+0x36>
 118:	82 34       	cpi	r24, 0x42	; 66
 11a:	51 f0       	breq	.+20     	; 0x130 <__vector_17+0x48>
 11c:	12 c0       	rjmp	.+36     	; 0x142 <__vector_17+0x5a>
            case 'A': 
                SPDR = ADC_Read(0) >> 2;  // Valor POT1
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Read>
 124:	96 95       	lsr	r25
 126:	87 95       	ror	r24
 128:	96 95       	lsr	r25
 12a:	87 95       	ror	r24
 12c:	8e bd       	out	0x2e, r24	; 46
                break;
 12e:	0c c0       	rjmp	.+24     	; 0x148 <__vector_17+0x60>
            case 'B':
                SPDR = ADC_Read(1) >> 2;  // Valor POT2
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Read>
 136:	96 95       	lsr	r25
 138:	87 95       	ror	r24
 13a:	96 95       	lsr	r25
 13c:	87 95       	ror	r24
 13e:	8e bd       	out	0x2e, r24	; 46
                break;
 140:	03 c0       	rjmp	.+6      	; 0x148 <__vector_17+0x60>
            default:
                actualizarLEDs(dato);     // Control LEDs
 142:	0e 94 61 00 	call	0xc2	; 0xc2 <actualizarLEDs>
                SPDR = 0x00;
 146:	1e bc       	out	0x2e, r1	; 46
                break;
        }
        esperando_comando = 0;
 148:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	04 c0       	rjmp	.+8      	; 0x156 <__vector_17+0x6e>
    } else {
        esperando_comando = 1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        SPDR = 0x00;
 154:	1e bc       	out	0x2e, r1	; 46
    }
}
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	7f 91       	pop	r23
 164:	6f 91       	pop	r22
 166:	5f 91       	pop	r21
 168:	4f 91       	pop	r20
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <init_perifericos>:

void init_perifericos() {
    // Configuración SPI
    SPI_SlaveInit();
 178:	0e 94 cf 00 	call	0x19e	; 0x19e <SPI_SlaveInit>
    SPDR = 0x00;
 17c:	1e bc       	out	0x2e, r1	; 46
    SPCR |= (1 << SPIE);
 17e:	8c b5       	in	r24, 0x2c	; 44
 180:	80 68       	ori	r24, 0x80	; 128
 182:	8c bd       	out	0x2c, r24	; 44
    
    // Configuración ADC
    ADC_Init();
 184:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_Init>
    
    // Configuración LEDs
    DDRD |= LEDS_PORTD_MASK;
 188:	8a b1       	in	r24, 0x0a	; 10
 18a:	8c 6f       	ori	r24, 0xFC	; 252
 18c:	8a b9       	out	0x0a, r24	; 10
    DDRB |= LEDS_PORTB_MASK;
 18e:	84 b1       	in	r24, 0x04	; 4
 190:	83 60       	ori	r24, 0x03	; 3
 192:	84 b9       	out	0x04, r24	; 4
 194:	08 95       	ret

00000196 <main>:
}

int main(void) {
    init_perifericos();
 196:	0e 94 bc 00 	call	0x178	; 0x178 <init_perifericos>
    sei();
 19a:	78 94       	sei
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0x6>

0000019e <SPI_SlaveInit>:
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
}

void SPI_SlaveInit(void) {
	// MISO (PB4) como salida
	DDRB |= (1 << PB4);
 19e:	84 b1       	in	r24, 0x04	; 4
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	84 b9       	out	0x04, r24	; 4
	// MOSI, SCK, SS como entradas
	DDRB &= ~((1 << PB2) | (1 << PB3) | (1 << PB5));
 1a4:	84 b1       	in	r24, 0x04	; 4
 1a6:	83 7d       	andi	r24, 0xD3	; 211
 1a8:	84 b9       	out	0x04, r24	; 4

	// Habilitar SPI en modo esclavo
	SPCR = (1 << SPE);
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	8c bd       	out	0x2c, r24	; 44
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
