
LAB Y POST-LAB 3 (MAESTRO).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00000434  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000434  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080017a  0080017a  00000542  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc7  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a18  00000000  00000000  00001643  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070e  00000000  00000000  0000205b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  0000276c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059d  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000421  00000000  00000000  00002e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000032ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 37       	cpi	r26, 0x7A	; 122
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e7       	ldi	r26, 0x7A	; 122
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 37       	cpi	r26, 0x7C	; 124
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  9e:	0c 94 18 02 	jmp	0x430	; 0x430 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <configurarPuertos>:
const uint8_t MODO_LECTURA = 'P';
const uint8_t MODO_ESCRITURA = 'L';

// Configuración de pines
void configurarPuertos() {
    DDRD |= 0b11111100;  // Pines D2-D7 como salida
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8c 6f       	ori	r24, 0xFC	; 252
  aa:	8a b9       	out	0x0a, r24	; 10
    DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2); // Pines B0-B2 como salida
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	87 60       	ori	r24, 0x07	; 7
  b0:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1 << PB2);  // SS en alto inicialmente
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	08 95       	ret

000000ba <actualizarLEDs>:
}

// Control de LEDs
void actualizarLEDs(uint8_t valor) {
    PORTD = (PORTD & 0b00000011) | (valor << 2);
  ba:	9b b1       	in	r25, 0x0b	; 11
  bc:	28 2f       	mov	r18, r24
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	93 70       	andi	r25, 0x03	; 3
  ca:	29 2b       	or	r18, r25
  cc:	2b b9       	out	0x0b, r18	; 11
    PORTB = (PORTB & 0b11111100) | (valor >> 6);
  ce:	95 b1       	in	r25, 0x05	; 5
  d0:	9c 7f       	andi	r25, 0xFC	; 252
  d2:	82 95       	swap	r24
  d4:	86 95       	lsr	r24
  d6:	86 95       	lsr	r24
  d8:	83 70       	andi	r24, 0x03	; 3
  da:	89 2b       	or	r24, r25
  dc:	85 b9       	out	0x05, r24	; 5
  de:	08 95       	ret

000000e0 <limpiarBufferSerial>:
}

// Limpieza de buffer serial
void limpiarBufferSerial() {
    while (UART_Available()) {
  e0:	08 c0       	rjmp	.+16     	; 0xf2 <limpiarBufferSerial+0x12>
        UART_Receive();
  e2:	0e 94 76 01 	call	0x2ec	; 0x2ec <UART_Receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	8f e8       	ldi	r24, 0x8F	; 143
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <limpiarBufferSerial+0xa>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <limpiarBufferSerial+0x10>
  f0:	00 00       	nop
    PORTB = (PORTB & 0b11111100) | (valor >> 6);
}

// Limpieza de buffer serial
void limpiarBufferSerial() {
    while (UART_Available()) {
  f2:	0e 94 8a 01 	call	0x314	; 0x314 <UART_Available>
  f6:	81 11       	cpse	r24, r1
  f8:	f4 cf       	rjmp	.-24     	; 0xe2 <limpiarBufferSerial+0x2>
        UART_Receive();
        _delay_us(100);
    }
}
  fa:	08 95       	ret

000000fc <obtenerValorNumerico>:

// Procesamiento de entrada numérica
uint8_t obtenerValorNumerico() {
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	00 d0       	rcall	.+0      	; 0x106 <obtenerValorNumerico+0xa>
 106:	00 d0       	rcall	.+0      	; 0x108 <obtenerValorNumerico+0xc>
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
    char buffer[5] = {0};
 10e:	fe 01       	movw	r30, r28
 110:	31 96       	adiw	r30, 0x01	; 1
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	df 01       	movw	r26, r30
 116:	1d 92       	st	X+, r1
 118:	8a 95       	dec	r24
 11a:	e9 f7       	brne	.-6      	; 0x116 <obtenerValorNumerico+0x1a>
    uint8_t indice = 0;
 11c:	10 e0       	ldi	r17, 0x00	; 0
    
    while (indice < 4) {
 11e:	12 c0       	rjmp	.+36     	; 0x144 <obtenerValorNumerico+0x48>
        char caracter = UART_Receive();
 120:	0e 94 76 01 	call	0x2ec	; 0x2ec <UART_Receive>
        if (caracter == '\r' || caracter == '\n') break;
 124:	8d 30       	cpi	r24, 0x0D	; 13
 126:	81 f0       	breq	.+32     	; 0x148 <obtenerValorNumerico+0x4c>
 128:	8a 30       	cpi	r24, 0x0A	; 10
 12a:	71 f0       	breq	.+28     	; 0x148 <obtenerValorNumerico+0x4c>
        
        buffer[indice++] = caracter;
 12c:	01 e0       	ldi	r16, 0x01	; 1
 12e:	01 0f       	add	r16, r17
 130:	e1 e0       	ldi	r30, 0x01	; 1
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ec 0f       	add	r30, r28
 136:	fd 1f       	adc	r31, r29
 138:	e1 0f       	add	r30, r17
 13a:	f1 1d       	adc	r31, r1
 13c:	80 83       	st	Z, r24
        UART_Transmit(caracter);
 13e:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_Transmit>
    
    while (indice < 4) {
        char caracter = UART_Receive();
        if (caracter == '\r' || caracter == '\n') break;
        
        buffer[indice++] = caracter;
 142:	10 2f       	mov	r17, r16
// Procesamiento de entrada numérica
uint8_t obtenerValorNumerico() {
    char buffer[5] = {0};
    uint8_t indice = 0;
    
    while (indice < 4) {
 144:	14 30       	cpi	r17, 0x04	; 4
 146:	60 f3       	brcs	.-40     	; 0x120 <obtenerValorNumerico+0x24>
        
        buffer[indice++] = caracter;
        UART_Transmit(caracter);
    }
    
    uint16_t valor = atoi(buffer);
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	0e 94 bd 01 	call	0x37a	; 0x37a <atoi>
 150:	28 2f       	mov	r18, r24
 152:	39 2f       	mov	r19, r25
    return (valor > 255) ? 255 : (uint8_t)valor;
 154:	2f 3f       	cpi	r18, 0xFF	; 255
 156:	31 05       	cpc	r19, r1
 158:	11 f0       	breq	.+4      	; 0x15e <obtenerValorNumerico+0x62>
 15a:	08 f0       	brcs	.+2      	; 0x15e <obtenerValorNumerico+0x62>
 15c:	8f ef       	ldi	r24, 0xFF	; 255
}
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <leerPotenciometros>:

// Modo de lectura de potenciómetros
void leerPotenciometros() {
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
    uint8_t valor_pot1, valor_pot2;
    
    // Lectura del primer potenciómetro
    PORTB &= ~(1 << PB2);          // Activar línea SS
 176:	85 b1       	in	r24, 0x05	; 5
 178:	8b 7f       	andi	r24, 0xFB	; 251
 17a:	85 b9       	out	0x05, r24	; 5
    SPI_Exchange(COMANDO_POT1);    // Enviar comando para POT1
 17c:	81 e4       	ldi	r24, 0x41	; 65
 17e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SPI_Exchange>
 182:	8f e8       	ldi	r24, 0x8F	; 143
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <leerPotenciometros+0x14>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <leerPotenciometros+0x1a>
 18c:	00 00       	nop
    _delay_us(100);                // Espera para estabilización
    valor_pot1 = SPI_Exchange(0x00); // Recibir valor
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SPI_Exchange>
 194:	d8 2f       	mov	r29, r24
    PORTB |= (1 << PB2);           // Desactivar línea SS
 196:	85 b1       	in	r24, 0x05	; 5
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	8f e1       	ldi	r24, 0x1F	; 31
 19e:	9e e4       	ldi	r25, 0x4E	; 78
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <leerPotenciometros+0x2e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <leerPotenciometros+0x34>
 1a6:	00 00       	nop

    _delay_ms(5);                  // Pequeña pausa entre lecturas

    // Lectura del segundo potenciómetro
    PORTB &= ~(1 << PB2);          // Activar línea SS
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	8b 7f       	andi	r24, 0xFB	; 251
 1ac:	85 b9       	out	0x05, r24	; 5
    SPI_Exchange(COMANDO_POT2);    // Enviar comando para POT2
 1ae:	82 e4       	ldi	r24, 0x42	; 66
 1b0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SPI_Exchange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	8f e8       	ldi	r24, 0x8F	; 143
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <leerPotenciometros+0x46>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <leerPotenciometros+0x4c>
 1be:	00 00       	nop
    _delay_us(100);                // Espera para estabilización
    valor_pot2 = SPI_Exchange(0x00); // Recibir valor
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SPI_Exchange>
 1c6:	c8 2f       	mov	r28, r24
    PORTB |= (1 << PB2);           // Desactivar línea SS
 1c8:	85 b1       	in	r24, 0x05	; 5
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	85 b9       	out	0x05, r24	; 5

    UART_SendString("POT1: ");
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <UART_SendString>
    UART_SendNumber(valor_pot1);
 1d6:	8d 2f       	mov	r24, r29
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 90 01 	call	0x320	; 0x320 <UART_SendNumber>
    UART_SendString("  POT2: ");
 1de:	88 e0       	ldi	r24, 0x08	; 8
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <UART_SendString>
    UART_SendNumber(valor_pot2);
 1e6:	8c 2f       	mov	r24, r28
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 90 01 	call	0x320	; 0x320 <UART_SendNumber>
    UART_SendString("\r\n");
 1ee:	86 e2       	ldi	r24, 0x26	; 38
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <UART_SendString>
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <main>:

int main(void) {
    // Inicialización
    UART_Init(9600);
 1fc:	80 e8       	ldi	r24, 0x80	; 128
 1fe:	95 e2       	ldi	r25, 0x25	; 37
 200:	0e 94 64 01 	call	0x2c8	; 0x2c8 <UART_Init>
    SPI_MasterInit();
 204:	0e 94 55 01 	call	0x2aa	; 0x2aa <SPI_MasterInit>
    configurarPuertos();
 208:	0e 94 53 00 	call	0xa6	; 0xa6 <configurarPuertos>

    // Bucle principal
    while (1) {
        if (UART_Available()) {
 20c:	0e 94 8a 01 	call	0x314	; 0x314 <UART_Available>
 210:	88 23       	and	r24, r24
 212:	d1 f1       	breq	.+116    	; 0x288 <main+0x8c>
            char comando = UART_Receive();
 214:	0e 94 76 01 	call	0x2ec	; 0x2ec <UART_Receive>

            if (comando == 'P' || comando == 'p') {
 218:	80 35       	cpi	r24, 0x50	; 80
 21a:	11 f0       	breq	.+4      	; 0x220 <main+0x24>
 21c:	80 37       	cpi	r24, 0x70	; 112
 21e:	51 f4       	brne	.+20     	; 0x234 <main+0x38>
                modo_operacion = MODO_LECTURA;
 220:	80 e5       	ldi	r24, 0x50	; 80
 222:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                UART_SendString("Modo Lectura Activado\r\n");
 226:	81 e1       	ldi	r24, 0x11	; 17
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <UART_SendString>
                limpiarBufferSerial();
 22e:	0e 94 70 00 	call	0xe0	; 0xe0 <limpiarBufferSerial>
 232:	2a c0       	rjmp	.+84     	; 0x288 <main+0x8c>
            }
            else if (comando == 'L' || comando == 'l') {
 234:	8c 34       	cpi	r24, 0x4C	; 76
 236:	11 f0       	breq	.+4      	; 0x23c <main+0x40>
 238:	8c 36       	cpi	r24, 0x6C	; 108
 23a:	31 f5       	brne	.+76     	; 0x288 <main+0x8c>
                modo_operacion = MODO_ESCRITURA;
 23c:	8c e4       	ldi	r24, 0x4C	; 76
 23e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                UART_SendString("Modo Escritura Activado\r\n");
 242:	89 e2       	ldi	r24, 0x29	; 41
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 7d 01 	call	0x2fa	; 0x2fa <UART_SendString>
                UART_SendString("Ingrese un valor entre 0 y 255: ");
 24a:	83 e4       	ldi	r24, 0x43	; 67
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <UART_SendString>
                
                uint8_t valor = obtenerValorNumerico();
 252:	0e 94 7e 00 	call	0xfc	; 0xfc <obtenerValorNumerico>
 256:	c8 2f       	mov	r28, r24
                
                UART_SendString("\r\nValor configurado: ");
 258:	84 e6       	ldi	r24, 0x64	; 100
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <UART_SendString>
                UART_SendNumber(valor);
 260:	8c 2f       	mov	r24, r28
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 90 01 	call	0x320	; 0x320 <UART_SendNumber>
                UART_SendString("\r\n");
 268:	86 e2       	ldi	r24, 0x26	; 38
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <UART_SendString>

                actualizarLEDs(valor);
 270:	8c 2f       	mov	r24, r28
 272:	0e 94 5d 00 	call	0xba	; 0xba <actualizarLEDs>
                PORTB &= ~(1 << PB2);
 276:	85 b1       	in	r24, 0x05	; 5
 278:	8b 7f       	andi	r24, 0xFB	; 251
 27a:	85 b9       	out	0x05, r24	; 5
                SPI_Exchange(valor);
 27c:	8c 2f       	mov	r24, r28
 27e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SPI_Exchange>
                PORTB |= (1 << PB2);
 282:	85 b1       	in	r24, 0x05	; 5
 284:	84 60       	ori	r24, 0x04	; 4
 286:	85 b9       	out	0x05, r24	; 5
            }
        }

        if (modo_operacion == MODO_LECTURA) {
 288:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 28c:	80 35       	cpi	r24, 0x50	; 80
 28e:	09 f0       	breq	.+2      	; 0x292 <main+0x96>
 290:	bd cf       	rjmp	.-134    	; 0x20c <main+0x10>
            leerPotenciometros();
 292:	0e 94 b9 00 	call	0x172	; 0x172 <leerPotenciometros>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	2f ef       	ldi	r18, 0xFF	; 255
 298:	89 e6       	ldi	r24, 0x69	; 105
 29a:	98 e1       	ldi	r25, 0x18	; 24
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	90 40       	sbci	r25, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0xa0>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0xaa>
 2a6:	00 00       	nop
 2a8:	b1 cf       	rjmp	.-158    	; 0x20c <main+0x10>

000002aa <SPI_MasterInit>:
	DDRB |= (1 << PB4);
	// MOSI, SCK, SS como entradas
	DDRB &= ~((1 << PB2) | (1 << PB3) | (1 << PB5));

	// Habilitar SPI en modo esclavo
	SPCR = (1 << SPE);
 2aa:	84 b1       	in	r24, 0x04	; 4
 2ac:	8c 62       	ori	r24, 0x2C	; 44
 2ae:	84 b9       	out	0x04, r24	; 4
 2b0:	84 b1       	in	r24, 0x04	; 4
 2b2:	8f 7e       	andi	r24, 0xEF	; 239
 2b4:	84 b9       	out	0x04, r24	; 4
 2b6:	81 e5       	ldi	r24, 0x51	; 81
 2b8:	8c bd       	out	0x2c, r24	; 44
 2ba:	08 95       	ret

000002bc <SPI_Exchange>:
}

uint8_t SPI_Exchange(uint8_t data) {
	SPDR = data; // Carga el dato a enviar
 2bc:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))); // Espera hasta que se complete
 2be:	0d b4       	in	r0, 0x2d	; 45
 2c0:	07 fe       	sbrs	r0, 7
 2c2:	fd cf       	rjmp	.-6      	; 0x2be <SPI_Exchange+0x2>
	return SPDR; // Devuelve el dato recibido
 2c4:	8e b5       	in	r24, 0x2e	; 46
}
 2c6:	08 95       	ret

000002c8 <UART_Init>:
volatile uint8_t serial_data_ready = 0;
volatile char serial_command = 0;

// Inicialización (tu estilo)
void UART_Init(uint16_t ubrr) {
    UBRR0H = (uint8_t)(ubrr >> 8);
 2c8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (uint8_t)ubrr;
 2cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0); // + Interrupción RX
 2d0:	88 e9       	ldi	r24, 0x98	; 152
 2d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8 bits, 1 stop bit
 2d6:	86 e0       	ldi	r24, 0x06	; 6
 2d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2dc:	08 95       	ret

000002de <UART_Transmit>:
}

// Función de transmisión (tu estilo)
void UART_Transmit(char data) {
    while (!(UCSR0A & (1 << UDRE0)));
 2de:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2e2:	95 ff       	sbrs	r25, 5
 2e4:	fc cf       	rjmp	.-8      	; 0x2de <UART_Transmit>
    UDR0 = data;
 2e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2ea:	08 95       	ret

000002ec <UART_Receive>:
}

// Función de recepción (tu estilo)
char UART_Receive(void) {
    while (!(UCSR0A & (1 << RXC0)));
 2ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2f0:	88 23       	and	r24, r24
 2f2:	e4 f7       	brge	.-8      	; 0x2ec <UART_Receive>
    return UDR0;
 2f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 2f8:	08 95       	ret

000002fa <UART_SendString>:

// Funciones adicionales (de Mario, adaptadas)
void UART_SendString(const char* str) {
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	ec 01       	movw	r28, r24
    while (*str) UART_Transmit(*str++);
 300:	03 c0       	rjmp	.+6      	; 0x308 <UART_SendString+0xe>
 302:	21 96       	adiw	r28, 0x01	; 1
 304:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_Transmit>
 308:	88 81       	ld	r24, Y
 30a:	81 11       	cpse	r24, r1
 30c:	fa cf       	rjmp	.-12     	; 0x302 <UART_SendString+0x8>
}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <UART_Available>:

bool UART_Available(void) {
    return (UCSR0A & (1 << RXC0));
 314:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
}
 318:	88 1f       	adc	r24, r24
 31a:	88 27       	eor	r24, r24
 31c:	88 1f       	adc	r24, r24
 31e:	08 95       	ret

00000320 <UART_SendNumber>:

void UART_SendNumber(uint16_t num) {
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	00 d0       	rcall	.+0      	; 0x326 <UART_SendNumber+0x6>
 326:	00 d0       	rcall	.+0      	; 0x328 <UART_SendNumber+0x8>
 328:	00 d0       	rcall	.+0      	; 0x32a <UART_SendNumber+0xa>
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 32e:	4a e0       	ldi	r20, 0x0A	; 10
 330:	be 01       	movw	r22, r28
 332:	6f 5f       	subi	r22, 0xFF	; 255
 334:	7f 4f       	sbci	r23, 0xFF	; 255
 336:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__itoa_ncheck>
    char buffer[6];
    itoa(num, buffer, 10); // Conversión a string
    UART_SendString(buffer);
 33a:	ce 01       	movw	r24, r28
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <UART_SendString>
}
 342:	26 96       	adiw	r28, 0x06	; 6
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	de bf       	out	0x3e, r29	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	cd bf       	out	0x3d, r28	; 61
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <__vector_18>:

// Interrupción RX (tu estilo)
ISR(USART_RX_vect) {
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	8f 93       	push	r24
    serial_command = UDR0;
 360:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 364:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
    serial_data_ready = 1;
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <serial_data_ready>
 36e:	8f 91       	pop	r24
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <atoi>:
 37a:	fc 01       	movw	r30, r24
 37c:	88 27       	eor	r24, r24
 37e:	99 27       	eor	r25, r25
 380:	e8 94       	clt
 382:	21 91       	ld	r18, Z+
 384:	20 32       	cpi	r18, 0x20	; 32
 386:	e9 f3       	breq	.-6      	; 0x382 <atoi+0x8>
 388:	29 30       	cpi	r18, 0x09	; 9
 38a:	10 f0       	brcs	.+4      	; 0x390 <atoi+0x16>
 38c:	2e 30       	cpi	r18, 0x0E	; 14
 38e:	c8 f3       	brcs	.-14     	; 0x382 <atoi+0x8>
 390:	2b 32       	cpi	r18, 0x2B	; 43
 392:	41 f0       	breq	.+16     	; 0x3a4 <atoi+0x2a>
 394:	2d 32       	cpi	r18, 0x2D	; 45
 396:	39 f4       	brne	.+14     	; 0x3a6 <atoi+0x2c>
 398:	68 94       	set
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <atoi+0x2a>
 39c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__mulhi_const_10>
 3a0:	82 0f       	add	r24, r18
 3a2:	91 1d       	adc	r25, r1
 3a4:	21 91       	ld	r18, Z+
 3a6:	20 53       	subi	r18, 0x30	; 48
 3a8:	2a 30       	cpi	r18, 0x0A	; 10
 3aa:	c0 f3       	brcs	.-16     	; 0x39c <atoi+0x22>
 3ac:	1e f4       	brtc	.+6      	; 0x3b4 <atoi+0x3a>
 3ae:	90 95       	com	r25
 3b0:	81 95       	neg	r24
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	08 95       	ret

000003b6 <__itoa_ncheck>:
 3b6:	bb 27       	eor	r27, r27
 3b8:	4a 30       	cpi	r20, 0x0A	; 10
 3ba:	31 f4       	brne	.+12     	; 0x3c8 <__itoa_ncheck+0x12>
 3bc:	99 23       	and	r25, r25
 3be:	22 f4       	brpl	.+8      	; 0x3c8 <__itoa_ncheck+0x12>
 3c0:	bd e2       	ldi	r27, 0x2D	; 45
 3c2:	90 95       	com	r25
 3c4:	81 95       	neg	r24
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__utoa_common>

000003cc <__mulhi_const_10>:
 3cc:	7a e0       	ldi	r23, 0x0A	; 10
 3ce:	97 9f       	mul	r25, r23
 3d0:	90 2d       	mov	r25, r0
 3d2:	87 9f       	mul	r24, r23
 3d4:	80 2d       	mov	r24, r0
 3d6:	91 0d       	add	r25, r1
 3d8:	11 24       	eor	r1, r1
 3da:	08 95       	ret

000003dc <__utoa_ncheck>:
 3dc:	bb 27       	eor	r27, r27

000003de <__utoa_common>:
 3de:	fb 01       	movw	r30, r22
 3e0:	55 27       	eor	r21, r21
 3e2:	aa 27       	eor	r26, r26
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	aa 1f       	adc	r26, r26
 3ea:	a4 17       	cp	r26, r20
 3ec:	10 f0       	brcs	.+4      	; 0x3f2 <__utoa_common+0x14>
 3ee:	a4 1b       	sub	r26, r20
 3f0:	83 95       	inc	r24
 3f2:	50 51       	subi	r21, 0x10	; 16
 3f4:	b9 f7       	brne	.-18     	; 0x3e4 <__utoa_common+0x6>
 3f6:	a0 5d       	subi	r26, 0xD0	; 208
 3f8:	aa 33       	cpi	r26, 0x3A	; 58
 3fa:	08 f0       	brcs	.+2      	; 0x3fe <__utoa_common+0x20>
 3fc:	a9 5d       	subi	r26, 0xD9	; 217
 3fe:	a1 93       	st	Z+, r26
 400:	00 97       	sbiw	r24, 0x00	; 0
 402:	79 f7       	brne	.-34     	; 0x3e2 <__utoa_common+0x4>
 404:	b1 11       	cpse	r27, r1
 406:	b1 93       	st	Z+, r27
 408:	11 92       	st	Z+, r1
 40a:	cb 01       	movw	r24, r22
 40c:	0c 94 08 02 	jmp	0x410	; 0x410 <strrev>

00000410 <strrev>:
 410:	dc 01       	movw	r26, r24
 412:	fc 01       	movw	r30, r24
 414:	67 2f       	mov	r22, r23
 416:	71 91       	ld	r23, Z+
 418:	77 23       	and	r23, r23
 41a:	e1 f7       	brne	.-8      	; 0x414 <strrev+0x4>
 41c:	32 97       	sbiw	r30, 0x02	; 2
 41e:	04 c0       	rjmp	.+8      	; 0x428 <strrev+0x18>
 420:	7c 91       	ld	r23, X
 422:	6d 93       	st	X+, r22
 424:	70 83       	st	Z, r23
 426:	62 91       	ld	r22, -Z
 428:	ae 17       	cp	r26, r30
 42a:	bf 07       	cpc	r27, r31
 42c:	c8 f3       	brcs	.-14     	; 0x420 <strrev+0x10>
 42e:	08 95       	ret

00000430 <_exit>:
 430:	f8 94       	cli

00000432 <__stop_program>:
 432:	ff cf       	rjmp	.-2      	; 0x432 <__stop_program>
