
POST-LAB 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000003b4  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  00000452  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab4  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076f  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000630  00000000  00000000  00001747  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000474  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000289  00000000  00000000  00002290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002519  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a7 01 	call	0x34e	; 0x34e <main>
  9e:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
/************************/
// NON-Interrupt subroutines
void setup(void) 
{
    // Configurar PD0-PD6 como salidas (display)
    DDRD  = 0b01111111;
  a6:	8f e7       	ldi	r24, 0x7F	; 127
  a8:	8a b9       	out	0x0a, r24	; 10
    
    // Configurar botones (A3, A4, A5 como entradas sin pull-up)
    DDRC  &= ~((1 << PC3) | (1 << PC4) | (1 << PC5));
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	87 7c       	andi	r24, 0xC7	; 199
  ae:	87 b9       	out	0x07, r24	; 7
    PORTC &= ~((1 << PC3) | (1 << PC4) | (1 << PC5));
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	87 7c       	andi	r24, 0xC7	; 199
  b4:	88 b9       	out	0x08, r24	; 8
    
    // Configurar LEDs de jugadores
    DDRD  |= (1 << PD7);
  b6:	8a b1       	in	r24, 0x0a	; 10
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	8a b9       	out	0x0a, r24	; 10
    DDRB  |= (1 << PB0) | (1 << PB1) | (1 << PB2);
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	84 b9       	out	0x04, r24	; 4
    DDRB  |= (1 << PB3) | (1 << PB4) | (1 << PB5);
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	88 63       	ori	r24, 0x38	; 56
  c6:	84 b9       	out	0x04, r24	; 4
    DDRC  |= (1 << PC0);
  c8:	87 b1       	in	r24, 0x07	; 7
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	87 b9       	out	0x07, r24	; 7
    
    // Mostrar '0' al inicio
    PORTD = segmentos[0];
  ce:	8f e3       	ldi	r24, 0x3F	; 63
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	08 95       	ret

000000d4 <updatePlayerLeds>:
}

void updatePlayerLeds(void) 
{
    // Jugador 1
    PORTD = (PORTD & 0b01111111) | ((player1Step == 1) ? (1 << PD7) : 0);
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	8f 77       	andi	r24, 0x7F	; 127
  d8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player1Step>
  dc:	91 30       	cpi	r25, 0x01	; 1
  de:	11 f4       	brne	.+4      	; 0xe4 <updatePlayerLeds+0x10>
  e0:	90 e8       	ldi	r25, 0x80	; 128
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <updatePlayerLeds+0x12>
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	89 2b       	or	r24, r25
  e8:	8b b9       	out	0x0b, r24	; 11
    PORTB = (PORTB & 0b11111000) |
  ea:	95 b1       	in	r25, 0x05	; 5
           ((player1Step == 2) ? (1 << PB0) : 0) |
  ec:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <player1Step>
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	22 30       	cpi	r18, 0x02	; 2
  f4:	09 f0       	breq	.+2      	; 0xf8 <updatePlayerLeds+0x24>
  f6:	80 e0       	ldi	r24, 0x00	; 0

void updatePlayerLeds(void) 
{
    // Jugador 1
    PORTD = (PORTD & 0b01111111) | ((player1Step == 1) ? (1 << PD7) : 0);
    PORTB = (PORTB & 0b11111000) |
  f8:	98 7f       	andi	r25, 0xF8	; 248
  fa:	89 2b       	or	r24, r25
           ((player1Step == 2) ? (1 << PB0) : 0) |
           ((player1Step == 3) ? (1 << PB1) : 0) |
  fc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player1Step>

void updatePlayerLeds(void) 
{
    // Jugador 1
    PORTD = (PORTD & 0b01111111) | ((player1Step == 1) ? (1 << PD7) : 0);
    PORTB = (PORTB & 0b11111000) |
 100:	93 30       	cpi	r25, 0x03	; 3
 102:	11 f4       	brne	.+4      	; 0x108 <updatePlayerLeds+0x34>
 104:	92 e0       	ldi	r25, 0x02	; 2
 106:	01 c0       	rjmp	.+2      	; 0x10a <updatePlayerLeds+0x36>
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	89 2b       	or	r24, r25
           ((player1Step == 2) ? (1 << PB0) : 0) |
           ((player1Step == 3) ? (1 << PB1) : 0) |
           ((player1Step == 4) ? (1 << PB2) : 0);
 10c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player1Step>

void updatePlayerLeds(void) 
{
    // Jugador 1
    PORTD = (PORTD & 0b01111111) | ((player1Step == 1) ? (1 << PD7) : 0);
    PORTB = (PORTB & 0b11111000) |
 110:	94 30       	cpi	r25, 0x04	; 4
 112:	09 f0       	breq	.+2      	; 0x116 <updatePlayerLeds+0x42>
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	89 2b       	or	r24, r25
 118:	85 b9       	out	0x05, r24	; 5
           ((player1Step == 2) ? (1 << PB0) : 0) |
           ((player1Step == 3) ? (1 << PB1) : 0) |
           ((player1Step == 4) ? (1 << PB2) : 0);
    
    // Jugador 2
    PORTB = (PORTB & 0b11000111) |
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	87 7c       	andi	r24, 0xC7	; 199
           ((player2Step == 1) ? (1 << PB3) : 0) |
 11e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
           ((player1Step == 2) ? (1 << PB0) : 0) |
           ((player1Step == 3) ? (1 << PB1) : 0) |
           ((player1Step == 4) ? (1 << PB2) : 0);
    
    // Jugador 2
    PORTB = (PORTB & 0b11000111) |
 122:	91 30       	cpi	r25, 0x01	; 1
 124:	11 f4       	brne	.+4      	; 0x12a <updatePlayerLeds+0x56>
 126:	98 e0       	ldi	r25, 0x08	; 8
 128:	01 c0       	rjmp	.+2      	; 0x12c <updatePlayerLeds+0x58>
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	89 2b       	or	r24, r25
           ((player2Step == 1) ? (1 << PB3) : 0) |
           ((player2Step == 2) ? (1 << PB4) : 0) |
 12e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
           ((player1Step == 2) ? (1 << PB0) : 0) |
           ((player1Step == 3) ? (1 << PB1) : 0) |
           ((player1Step == 4) ? (1 << PB2) : 0);
    
    // Jugador 2
    PORTB = (PORTB & 0b11000111) |
 132:	92 30       	cpi	r25, 0x02	; 2
 134:	11 f4       	brne	.+4      	; 0x13a <updatePlayerLeds+0x66>
 136:	90 e1       	ldi	r25, 0x10	; 16
 138:	01 c0       	rjmp	.+2      	; 0x13c <updatePlayerLeds+0x68>
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	89 2b       	or	r24, r25
           ((player2Step == 1) ? (1 << PB3) : 0) |
           ((player2Step == 2) ? (1 << PB4) : 0) |
           ((player2Step == 3) ? (1 << PB5) : 0);
 13e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
           ((player1Step == 2) ? (1 << PB0) : 0) |
           ((player1Step == 3) ? (1 << PB1) : 0) |
           ((player1Step == 4) ? (1 << PB2) : 0);
    
    // Jugador 2
    PORTB = (PORTB & 0b11000111) |
 142:	93 30       	cpi	r25, 0x03	; 3
 144:	11 f4       	brne	.+4      	; 0x14a <updatePlayerLeds+0x76>
 146:	90 e2       	ldi	r25, 0x20	; 32
 148:	01 c0       	rjmp	.+2      	; 0x14c <updatePlayerLeds+0x78>
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	89 2b       	or	r24, r25
 14e:	85 b9       	out	0x05, r24	; 5
           ((player2Step == 1) ? (1 << PB3) : 0) |
           ((player2Step == 2) ? (1 << PB4) : 0) |
           ((player2Step == 3) ? (1 << PB5) : 0);
    PORTC = (PORTC & 0b11111110) | ((player2Step == 4) ? (1 << PC0) : 0);
 150:	98 b1       	in	r25, 0x08	; 8
 152:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	24 30       	cpi	r18, 0x04	; 4
 15a:	09 f0       	breq	.+2      	; 0x15e <updatePlayerLeds+0x8a>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	9e 7f       	andi	r25, 0xFE	; 254
 160:	89 2b       	or	r24, r25
 162:	88 b9       	out	0x08, r24	; 8
 164:	08 95       	ret

00000166 <isButtonPressed>:
}

uint8_t isButtonPressed(uint8_t pin) 
{
    if (pin != PC3 && pin != PC4 && pin != PC5) return 0;
 166:	9d ef       	ldi	r25, 0xFD	; 253
 168:	98 0f       	add	r25, r24
 16a:	93 30       	cpi	r25, 0x03	; 3
 16c:	50 f5       	brcc	.+84     	; 0x1c2 <isButtonPressed+0x5c>
    
    if (PINC & (1 << pin)) {
 16e:	26 b1       	in	r18, 0x06	; 6
 170:	48 2f       	mov	r20, r24
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	08 2e       	mov	r0, r24
 176:	02 c0       	rjmp	.+4      	; 0x17c <isButtonPressed+0x16>
 178:	35 95       	asr	r19
 17a:	27 95       	ror	r18
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <isButtonPressed+0x12>
 180:	20 ff       	sbrs	r18, 0
 182:	21 c0       	rjmp	.+66     	; 0x1c6 <isButtonPressed+0x60>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	30 e7       	ldi	r19, 0x70	; 112
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	30 40       	sbci	r19, 0x00	; 0
 18e:	60 40       	sbci	r22, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <isButtonPressed+0x24>
 192:	00 c0       	rjmp	.+0      	; 0x194 <isButtonPressed+0x2e>
 194:	00 00       	nop
        _delay_ms(50);
        if (PINC & (1 << pin)) {
 196:	26 b1       	in	r18, 0x06	; 6
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	b9 01       	movw	r22, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <isButtonPressed+0x3c>
 19e:	75 95       	asr	r23
 1a0:	67 95       	ror	r22
 1a2:	8a 95       	dec	r24
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <isButtonPressed+0x38>
 1a6:	60 ff       	sbrs	r22, 0
 1a8:	10 c0       	rjmp	.+32     	; 0x1ca <isButtonPressed+0x64>
            while (PINC & (1 << pin));
 1aa:	86 b1       	in	r24, 0x06	; 6
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	04 2e       	mov	r0, r20
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <isButtonPressed+0x50>
 1b2:	95 95       	asr	r25
 1b4:	87 95       	ror	r24
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <isButtonPressed+0x4c>
 1ba:	80 fd       	sbrc	r24, 0
 1bc:	f6 cf       	rjmp	.-20     	; 0x1aa <isButtonPressed+0x44>
            return 1;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	08 95       	ret
    PORTC = (PORTC & 0b11111110) | ((player2Step == 4) ? (1 << PC0) : 0);
}

uint8_t isButtonPressed(uint8_t pin) 
{
    if (pin != PC3 && pin != PC4 && pin != PC5) return 0;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret
        if (PINC & (1 << pin)) {
            while (PINC & (1 << pin));
            return 1;
        }
    }
    return 0;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	08 95       	ret
 1ca:	80 e0       	ldi	r24, 0x00	; 0
}
 1cc:	08 95       	ret

000001ce <countdown>:

void countdown(void) 
{
    gameState = COUNTDOWN;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <gameState>
    for (uint8_t i = 5; i > 0; i--) {
 1d4:	85 e0       	ldi	r24, 0x05	; 5
 1d6:	10 c0       	rjmp	.+32     	; 0x1f8 <countdown+0x2a>
        PORTD = segmentos[i];
 1d8:	e8 2f       	mov	r30, r24
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	e0 50       	subi	r30, 0x00	; 0
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	90 81       	ld	r25, Z
 1e2:	9b b9       	out	0x0b, r25	; 11
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	39 e6       	ldi	r19, 0x69	; 105
 1e8:	98 e1       	ldi	r25, 0x18	; 24
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	30 40       	sbci	r19, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <countdown+0x1c>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <countdown+0x26>
 1f4:	00 00       	nop
}

void countdown(void) 
{
    gameState = COUNTDOWN;
    for (uint8_t i = 5; i > 0; i--) {
 1f6:	81 50       	subi	r24, 0x01	; 1
 1f8:	81 11       	cpse	r24, r1
 1fa:	ee cf       	rjmp	.-36     	; 0x1d8 <countdown+0xa>
        PORTD = segmentos[i];
        _delay_ms(500);
    }
    PORTD = segmentos[0];
 1fc:	8f e3       	ldi	r24, 0x3F	; 63
 1fe:	8b b9       	out	0x0b, r24	; 11
    gameState = RACE;
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <gameState>
 206:	08 95       	ret

00000208 <showVictory>:
}

void showVictory(uint8_t player) 
{
    if (player == 1) {
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	91 f5       	brne	.+100    	; 0x270 <showVictory+0x68>
        PORTB &= ~((1 << PB3) | (1 << PB4) | (1 << PB5));
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	87 7c       	andi	r24, 0xC7	; 199
 210:	85 b9       	out	0x05, r24	; 5
        PORTC &= ~(1 << PC0);
 212:	88 b1       	in	r24, 0x08	; 8
 214:	8e 7f       	andi	r24, 0xFE	; 254
 216:	88 b9       	out	0x08, r24	; 8
        PORTD = segmentos[1];
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	8b b9       	out	0x0b, r24	; 11
        
        for (uint8_t i = 0; i < 3; i++) {
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	1f c0       	rjmp	.+62     	; 0x25e <showVictory+0x56>
            PORTD |= (1 << PD7);
 220:	8b b1       	in	r24, 0x0b	; 11
 222:	80 68       	ori	r24, 0x80	; 128
 224:	8b b9       	out	0x0b, r24	; 11
            PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);
 226:	85 b1       	in	r24, 0x05	; 5
 228:	87 60       	ori	r24, 0x07	; 7
 22a:	85 b9       	out	0x05, r24	; 5
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	35 ea       	ldi	r19, 0xA5	; 165
 230:	8e e0       	ldi	r24, 0x0E	; 14
 232:	21 50       	subi	r18, 0x01	; 1
 234:	30 40       	sbci	r19, 0x00	; 0
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <showVictory+0x2a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <showVictory+0x34>
 23c:	00 00       	nop
            _delay_ms(300);
            PORTD &= ~(1 << PD7);
 23e:	8b b1       	in	r24, 0x0b	; 11
 240:	8f 77       	andi	r24, 0x7F	; 127
 242:	8b b9       	out	0x0b, r24	; 11
            PORTB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2));
 244:	85 b1       	in	r24, 0x05	; 5
 246:	88 7f       	andi	r24, 0xF8	; 248
 248:	85 b9       	out	0x05, r24	; 5
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	35 ea       	ldi	r19, 0xA5	; 165
 24e:	8e e0       	ldi	r24, 0x0E	; 14
 250:	21 50       	subi	r18, 0x01	; 1
 252:	30 40       	sbci	r19, 0x00	; 0
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <showVictory+0x48>
 258:	00 c0       	rjmp	.+0      	; 0x25a <showVictory+0x52>
 25a:	00 00       	nop
    if (player == 1) {
        PORTB &= ~((1 << PB3) | (1 << PB4) | (1 << PB5));
        PORTC &= ~(1 << PC0);
        PORTD = segmentos[1];
        
        for (uint8_t i = 0; i < 3; i++) {
 25c:	9f 5f       	subi	r25, 0xFF	; 255
 25e:	93 30       	cpi	r25, 0x03	; 3
 260:	f8 f2       	brcs	.-66     	; 0x220 <showVictory+0x18>
            PORTD &= ~(1 << PD7);
            PORTB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2));
            _delay_ms(300);
        }
        
        PORTD |= (1 << PD7);
 262:	8b b1       	in	r24, 0x0b	; 11
 264:	80 68       	ori	r24, 0x80	; 128
 266:	8b b9       	out	0x0b, r24	; 11
        PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	87 60       	ori	r24, 0x07	; 7
 26c:	85 b9       	out	0x05, r24	; 5
 26e:	08 95       	ret
    } else {
        PORTD &= ~(1 << PD7);
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	8f 77       	andi	r24, 0x7F	; 127
 274:	8b b9       	out	0x0b, r24	; 11
        PORTB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2));
 276:	85 b1       	in	r24, 0x05	; 5
 278:	88 7f       	andi	r24, 0xF8	; 248
 27a:	85 b9       	out	0x05, r24	; 5
        PORTD = segmentos[2];
 27c:	8b e5       	ldi	r24, 0x5B	; 91
 27e:	8b b9       	out	0x0b, r24	; 11
        
        for (uint8_t i = 0; i < 3; i++) {
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	1f c0       	rjmp	.+62     	; 0x2c2 <showVictory+0xba>
            PORTB |= (1 << PB3) | (1 << PB4) | (1 << PB5);
 284:	85 b1       	in	r24, 0x05	; 5
 286:	88 63       	ori	r24, 0x38	; 56
 288:	85 b9       	out	0x05, r24	; 5
            PORTC |= (1 << PC0);
 28a:	88 b1       	in	r24, 0x08	; 8
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	88 b9       	out	0x08, r24	; 8
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	35 ea       	ldi	r19, 0xA5	; 165
 294:	8e e0       	ldi	r24, 0x0E	; 14
 296:	21 50       	subi	r18, 0x01	; 1
 298:	30 40       	sbci	r19, 0x00	; 0
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <showVictory+0x8e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <showVictory+0x98>
 2a0:	00 00       	nop
            _delay_ms(300);
            PORTB &= ~((1 << PB3) | (1 << PB4) | (1 << PB5));
 2a2:	85 b1       	in	r24, 0x05	; 5
 2a4:	87 7c       	andi	r24, 0xC7	; 199
 2a6:	85 b9       	out	0x05, r24	; 5
            PORTC &= ~(1 << PC0);
 2a8:	88 b1       	in	r24, 0x08	; 8
 2aa:	8e 7f       	andi	r24, 0xFE	; 254
 2ac:	88 b9       	out	0x08, r24	; 8
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	35 ea       	ldi	r19, 0xA5	; 165
 2b2:	8e e0       	ldi	r24, 0x0E	; 14
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	30 40       	sbci	r19, 0x00	; 0
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <showVictory+0xac>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <showVictory+0xb6>
 2be:	00 00       	nop
    } else {
        PORTD &= ~(1 << PD7);
        PORTB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2));
        PORTD = segmentos[2];
        
        for (uint8_t i = 0; i < 3; i++) {
 2c0:	9f 5f       	subi	r25, 0xFF	; 255
 2c2:	93 30       	cpi	r25, 0x03	; 3
 2c4:	f8 f2       	brcs	.-66     	; 0x284 <showVictory+0x7c>
            PORTB &= ~((1 << PB3) | (1 << PB4) | (1 << PB5));
            PORTC &= ~(1 << PC0);
            _delay_ms(300);
        }
        
        PORTB |= (1 << PB3) | (1 << PB4) | (1 << PB5);
 2c6:	85 b1       	in	r24, 0x05	; 5
 2c8:	88 63       	ori	r24, 0x38	; 56
 2ca:	85 b9       	out	0x05, r24	; 5
        PORTC |= (1 << PC0);
 2cc:	88 b1       	in	r24, 0x08	; 8
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	88 b9       	out	0x08, r24	; 8
 2d2:	08 95       	ret

000002d4 <incrementPlayer1>:
    PORTD = segmentos[0];
}

void incrementPlayer1(void) 
{
    if (player1Step < 4) {
 2d4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <player1Step>
 2d8:	84 30       	cpi	r24, 0x04	; 4
 2da:	40 f4       	brcc	.+16     	; 0x2ec <incrementPlayer1+0x18>
        player1Step++;
 2dc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <player1Step>
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <player1Step>
        updatePlayerLeds();
 2e6:	0e 94 6a 00 	call	0xd4	; 0xd4 <updatePlayerLeds>
 2ea:	08 95       	ret
    } else if (player1Step == 4) {
 2ec:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <player1Step>
 2f0:	84 30       	cpi	r24, 0x04	; 4
 2f2:	31 f4       	brne	.+12     	; 0x300 <incrementPlayer1+0x2c>
        gameState = WIN_P1;
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <gameState>
        showVictory(1);
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 04 01 	call	0x208	; 0x208 <showVictory>
 300:	08 95       	ret

00000302 <incrementPlayer2>:
    }
}

void incrementPlayer2(void) 
{
    if (player2Step < 4) {
 302:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 306:	84 30       	cpi	r24, 0x04	; 4
 308:	40 f4       	brcc	.+16     	; 0x31a <incrementPlayer2+0x18>
        player2Step++;
 30a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 30e:	8f 5f       	subi	r24, 0xFF	; 255
 310:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
        updatePlayerLeds();
 314:	0e 94 6a 00 	call	0xd4	; 0xd4 <updatePlayerLeds>
 318:	08 95       	ret
    } else if (player2Step == 4) {
 31a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 31e:	84 30       	cpi	r24, 0x04	; 4
 320:	29 f4       	brne	.+10     	; 0x32c <incrementPlayer2+0x2a>
        gameState = WIN_P2;
 322:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <gameState>
        showVictory(2);
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	0e 94 04 01 	call	0x208	; 0x208 <showVictory>
 32c:	08 95       	ret

0000032e <resetGame>:
    }
}

void resetGame(void) 
{
    PORTD &= ~(1 << PD7);
 32e:	8b b1       	in	r24, 0x0b	; 11
 330:	8f 77       	andi	r24, 0x7F	; 127
 332:	8b b9       	out	0x0b, r24	; 11
    PORTB = 0;
 334:	15 b8       	out	0x05, r1	; 5
    PORTC &= ~(1 << PC0);
 336:	88 b1       	in	r24, 0x08	; 8
 338:	8e 7f       	andi	r24, 0xFE	; 254
 33a:	88 b9       	out	0x08, r24	; 8
    
    player1Step = 0;
 33c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <player1Step>
    player2Step = 0;
 340:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
    gameState = WAITING;
 344:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <gameState>
    PORTD = segmentos[0];
 348:	8f e3       	ldi	r24, 0x3F	; 63
 34a:	8b b9       	out	0x0b, r24	; 11
 34c:	08 95       	ret

0000034e <main>:

/************************/
// Main Function
int main(void) 
{
    setup();
 34e:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
    
    while (1) 
    {
        switch (gameState) 
 352:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <gameState>
 356:	82 30       	cpi	r24, 0x02	; 2
 358:	79 f0       	breq	.+30     	; 0x378 <main+0x2a>
 35a:	18 f4       	brcc	.+6      	; 0x362 <main+0x14>
 35c:	88 23       	and	r24, r24
 35e:	21 f0       	breq	.+8      	; 0x368 <main+0x1a>
 360:	f8 cf       	rjmp	.-16     	; 0x352 <main+0x4>
 362:	85 30       	cpi	r24, 0x05	; 5
 364:	e8 f0       	brcs	.+58     	; 0x3a0 <main+0x52>
 366:	f5 cf       	rjmp	.-22     	; 0x352 <main+0x4>
        {
            case WAITING:
                if (isButtonPressed(PC3)) {
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	0e 94 b3 00 	call	0x166	; 0x166 <isButtonPressed>
 36e:	88 23       	and	r24, r24
 370:	81 f3       	breq	.-32     	; 0x352 <main+0x4>
                    countdown();
 372:	0e 94 e7 00 	call	0x1ce	; 0x1ce <countdown>
 376:	ed cf       	rjmp	.-38     	; 0x352 <main+0x4>
                }
                break;
                
            case RACE:
                if (isButtonPressed(PC4)) {
 378:	84 e0       	ldi	r24, 0x04	; 4
 37a:	0e 94 b3 00 	call	0x166	; 0x166 <isButtonPressed>
 37e:	81 11       	cpse	r24, r1
                    incrementPlayer1();
 380:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <incrementPlayer1>
                }
                if (isButtonPressed(PC5)) {
 384:	85 e0       	ldi	r24, 0x05	; 5
 386:	0e 94 b3 00 	call	0x166	; 0x166 <isButtonPressed>
 38a:	81 11       	cpse	r24, r1
                    incrementPlayer2();
 38c:	0e 94 81 01 	call	0x302	; 0x302 <incrementPlayer2>
                }
                if (isButtonPressed(PC3)) {
 390:	83 e0       	ldi	r24, 0x03	; 3
 392:	0e 94 b3 00 	call	0x166	; 0x166 <isButtonPressed>
 396:	88 23       	and	r24, r24
 398:	e1 f2       	breq	.-72     	; 0x352 <main+0x4>
                    resetGame();
 39a:	0e 94 97 01 	call	0x32e	; 0x32e <resetGame>
 39e:	d9 cf       	rjmp	.-78     	; 0x352 <main+0x4>
                }
                break;
                
            case WIN_P1:
            case WIN_P2:
                if (isButtonPressed(PC3)) {
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	0e 94 b3 00 	call	0x166	; 0x166 <isButtonPressed>
 3a6:	88 23       	and	r24, r24
 3a8:	a1 f2       	breq	.-88     	; 0x352 <main+0x4>
                    resetGame();
 3aa:	0e 94 97 01 	call	0x32e	; 0x32e <resetGame>
 3ae:	d1 cf       	rjmp	.-94     	; 0x352 <main+0x4>

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
